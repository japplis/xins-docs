<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY dollar "$">
]>
<!--?xml-stylesheet href="style.css" type="text/css"?-->
<article>
  <title>XINS User Guide</title>

  <!-- $Id: XINSGuide.xml,v 1.106 2013/01/23 10:00:59 agoubard Exp $ -->

  <articleinfo>
    <author>
      <personname>
        <firstname>Anthony</firstname>

        <surname>Goubard</surname>
      </personname>

      <email>anthony.goubard@japplis.com</email>
    </author>

    <firstname>Anthony</firstname>

    <surname>Goubard</surname>

    <date>2012-05-12</date>
  </articleinfo>

  <sect1 id="introduction">
    <title>Introduction</title>

    <para>This document explains the XINS functionalities. It starts by
    explaining how to create and run a simple API and continue by explaining
    the more advanced features.</para>

    <sect2 id="what.is.xins">
      <title>What is XINS?</title>

      <para>XINS is an open-source Web Services framework.</para>

      <para>XINS supports POX-RPC, SOAP, XML-RPC and more. It consists mainly
      of an XML-based specification format and a Java-based implementation
      framework. From its specifications, XINS can generate HTML, WSDL,
      client-side code, server-side code, test forms and more.</para>
    </sect2>

    <sect2 id="notation">
      <title>Notation</title>

      <para>This document uses the Windows file system. If you are installing
      XINS in a Unix operating system like Mac OS X, linux or Solaris, change
      all back slash characters ('\') with a forward slash character ('/') in
      the file names of this document.</para>

      <para>The documentation provides some Javadoc links that only work in
      the HTML generated user guide.</para>
    </sect2>

    <sect2 id="requirements">
      <title>Requirements</title>

      <para>XINS requires the following software:</para>

      <itemizedlist>
        <listitem>
          <para>Java Development Kit 1.5 or higher: <ulink
          url="http://www.oracle.com/technetwork/java/javase/overview/index.html">http://www.oracle.com/technetwork/java/javase/overview/index.html</ulink>.</para>

          <para>If not done by the installation, you should set the
          environment variable <envar>JAVA_HOME</envar> to the directory where
          you have installed Java. Also add the
          <filename>%JAVA_HOME%\bin</filename> directory to the
          <envar>PATH</envar> environment variable. You can check the Java
          version installed by executing <literal>java
          -version</literal>.</para>

          <para>If you want to use XINS with Java 1.3.1 or Java 1.4, you can
          download XINS 2.3.</para>

          <para>XINS has been tested with Java 5.0, Java 6.0 and java
          7.0.</para>
        </listitem>

        <listitem>
          <para>Ant: <ulink
          url="http://ant.apache.org/">http://ant.apache.org/</ulink>, version
          1.6.2 or higher.</para>

          <para>You should set the environment variable
          <envar>ANT_HOME</envar> to the directory where you have installed
          Ant. Also add the <filename>%ANT_HOME%\bin</filename> directory to
          the <envar>PATH</envar> environment variable. You can check the Ant
          version installed by executing <literal>ant
          -version</literal>.</para>

          <caution>
            <para>If you have a <errortext>putDocumentInCache</errortext>
            error message in Eclipse, you may need to copy <ulink
            url="http://mirrors.ibiblio.org/pub/mirrors/maven2/xerces/xercesImpl/2.6.2/xercesImpl-2.6.2.jar">xercesImpl-2.6.2.jar</ulink>
            in the
            <filename>eclipse\plugins\org.apache.ant_1.6.5\lib</filename>
            directory.</para>

            <para>If you're using the Ant distribution included with NetBeans
            and have <errortext>putDocumentInCache</errortext> error messages,
            you should change the Ant home location to Ant 1.7.0 or higher (in
            Tools -&gt; Options -&gt; Miscalleneous -&gt; Ant.</para>
          </caution>
        </listitem>

        <listitem>
          <para>Optional: A servlet container. For example: <ulink
          url="http://tomcat.apache.org/">Tomcat</ulink> or <ulink
          url="http://jetty.codehaus.org/jetty/index.html">Jetty</ulink>. Any
          J2EE server can also deploy web applications. For example: <ulink
          url="https://glassfish.dev.java.net/">Glassfish</ulink>, <ulink
          url="http://www.orionserver.com/">Orion</ulink>, <ulink
          url="http://www.jboss.org/">JBoss</ulink>, <ulink
          url="http://www.ibm.com/software/info1/websphere/index.jsp">WebSphere</ulink>,
          <ulink
          url="http://www.bea.com/products/weblogic/server/index.shtml">WebLogic</ulink>,
          <ulink url="http://www.caucho.com/resin/">Resin</ulink> or <ulink
          url="http://www.macromedia.com/software/jrun/?promoid=home_prod_jr_100803">JRun</ulink>.</para>

          <para>For the installation of the servlet container, please refer to
          the documentation of the downloaded product.</para>

          <para>XINS contains it's own servlet container implementation for
          basic testing purposes only.</para>
        </listitem>

        <listitem>
          <para>Optional: A version control system. For example <ulink
          url="http://www.cvshome.org/">CVS</ulink> or <ulink
          url="http://subversion.tigris.org/">Subversion</ulink>.</para>
        </listitem>
      </itemizedlist>

      <para>This document will assume that you have installed Java and
      Ant.</para>
    </sect2>

    <sect2 id="installation">
      <title>Installation</title>

      <para>XINS can be installed using the Windows installer or by
      downloading the <filename>.tgz</filename> file and unzipping the file.
      Both options are explained below.</para>

      <sect3 id="windows.installer">
        <title>Windows Installer</title>

        <itemizedlist>
          <listitem>
            <para>Download <ulink
            url="http://prdownloads.sourceforge.net/xins/xins-3.0.exe?download">xins-3.0.exe</ulink>
            and execute it. A new directory <filename>c:\Program
            Files\xins</filename> is created.</para>
          </listitem>

          <listitem>
            <para>If you choose to compile and run the demo, you can go to the
            link provided in the <filename>README</filename> file, then click
            on <literal>MyFunction</literal> and on the
            <literal>MyComputer</literal> links in the examples section or use
            the test form link provided on this page.</para>
          </listitem>
        </itemizedlist>
      </sect3>

      <sect3 id="tgz.install">
        <title>Using the .tgz file</title>

        <itemizedlist>
          <listitem>
            <para>Download <ulink
            url="http://prdownloads.sourceforge.net/xins/xins-3.0.tgz?download">XINS
            3.0</ulink>.</para>
          </listitem>

          <listitem>
            <para>Unpack the downloaded file (
            <filename>xins-3.0.tgz</filename>) to a directory.</para>
          </listitem>

          <listitem>
            <para>Set the environment variable <envar>XINS_HOME</envar> to the
            <filename>xins</filename> directory.</para>
          </listitem>

          <listitem>
            <para>Add the path <filename>%XINS_HOME%\bin</filename> to your
            <envar>PATH</envar> environment variable</para>
          </listitem>
        </itemizedlist>

        <note>
          <para>On Windows, the new environment variable will not be set until
          you have rebooted or logged on again. If you don't want to reboot
          your computer, you can set the variables with <command>set
          XINS_HOME=c:\Program Files\xins</command> and <command>set
          PATH=%PATH%;%XINS_HOME%\bin</command> in a DOS prompt.</para>
        </note>

        <para>You are now ready to create your first XINS project.</para>
      </sect3>
    </sect2>

    <sect2 id="code.convention">
      <title>Code conventions</title>

      <para>API names should be in lowercase. E.g. <literal>billing</literal>
      (and not <literal>Billing</literal>).</para>

      <para>Functions, types and result codes should use the hungarian naming
      convention and start with an uppercase. E.g
      <literal>CheckStatus</literal>, <literal>Customer</literal> and
      <literal>NotFound</literal>.</para>

      <para>Parameters, functions, types and result codes starting with an
      underscore ('_') are reserved for XINS.</para>

      <para>Parameter names should start with a lowercase. E.g:
      <literal>message</literal> and <literal>houseNumber</literal>.</para>

      <para>The Java code used for the generated templates and in the examples
      has private variables starting with underscore ('_') and contains some
      comment for the CVS tags. For the rest the Sun Java code conventions and
      the Javadoc documentation style rules apply.</para>
    </sect2>
  </sect1>

  <sect1 id="setting.new.project">
    <title>Setting up a new project</title>

    <para>To create a minimal project with one API containing one function,
    you need 3 files :</para>

    <itemizedlist>
      <listitem>
        <para><filename>xins-project.xml</filename> : This file contains the
        names and properties of the different APIs.</para>
      </listitem>

      <listitem>
        <para><filename>api.xml</filename> : This file contains the
        declaration of the functions, types and result codes used in your
        project.</para>
      </listitem>

      <listitem>
        <para><filename>&lt;function name&gt;.fnc</filename> : This file
        contains the input parameters, the output parameters, the result codes
        and some examples of your function.</para>
      </listitem>
    </itemizedlist>

    <sect2 id="xins-project.xml">
      <title>xins-project.xml</title>

      <para><itemizedlist>
          <listitem>
            <para>Create a new directory where your APIs based on XINS will be
            created. For example <filename>c:\projects</filename>.</para>
          </listitem>

          <listitem>
            <para>Create a new <filename>xins-project.xml</filename> file in
            this directory with the content :</para>

            <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE project PUBLIC "-//XINS//DTD XINS Project 3.0//EN"
          "http://www.xins.org/dtd/xins-project_3_0.dtd"&gt;
&lt;project name="myprojects"
         rcsversion="$Revision: 1.106 $" rcsdate="$Date: 2013/01/23 10:00:59 $"
         domain="com.mycompany"&gt;
&lt;/project&gt;</screen>
          </listitem>
        </itemizedlist></para>
    </sect2>

    <sect2 id="api.xml">
      <title>api.xml</title>

      <para>To create a new <filename>api.xml</filename> execute in the
      <filename>projects</filename> directory <command>xins
      create-api</command>.</para>

      <para>The command will ask you for the name and the description of your
      api. The script will then create a new <filename>api.xml</filename> file
      in the directory <filename>apis\&lt;api name&gt;\spec</filename> with
      the content :<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE api PUBLIC "-//XINS//DTD XINS API 3.0//EN"
          "http://www.xins.org/dtd/api_3_0.dtd"&gt;

&lt;api name="myproject" rcsversion="$Revision: 1.106 $" rcsdate="$Date: 2013/01/23 10:00:59 $"&gt;

  &lt;description&gt;Description of the API.&lt;/description&gt;

&lt;/api&gt;</screen></para>

      <para>Then the command will ask you if you want to create an
      implementation of the api. This will create the skeleton java file where
      you will write the code of your function. If you answer yes, a new file
      <filename>impl.xml</filename> is created in the <literal>apis\&lt;api
      name&gt;\impl</literal> directory with the content:<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE impl PUBLIC "-//XINS//DTD Implementation 3.0//EN"
          "http://www.xins.org/dtd/impl_3_0.dtd"&gt;

&lt;impl&gt;
&lt;/impl&gt;</screen></para>

      <para>Finally the command will ask you if you want to define some
      environments with your api. If you answer yes, a new file
      <filename>environments.xml</filename> is created in the
      <filename>apis\&lt;api name&gt;</filename> directory with the
      content:<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE environments PUBLIC "-//XINS//DTD Environments 3.0//EN"
          "http://www.xins.org/dtd/environments_3_0.dtd"&gt;

&lt;environments&gt;

  &lt;environment id="localhost" url="http://127.0.0.1:8080/myproject/" /&gt;

&lt;/environments&gt;</screen></para>

      <note>
        <para>In this guide we will use the <literal>xins</literal> command to
        create the different files of the project, but it is also possible to
        do it manually using a text editor.</para>
      </note>

      <para>If you created the file manually, add the line <literal>&lt;api
      name="myproject"/&gt;</literal> in the
      <filename>xins-project.xml</filename> file. If the API has an
      implementation, add the element <literal>&lt;impl/&gt;</literal> in the
      <literal>&lt;api&gt;</literal> element and if it defines some
      environments add <literal>&lt;environments/&gt;</literal> in
      <literal>&lt;api&gt;</literal>.</para>
    </sect2>

    <sect2 id="myfunction.fnc">
      <title>MyFunction.fnc</title>

      <para>Now that you've created the API definition, we need to define a
      function within this API.</para>

      <para>To create a new function execute <command>xins
      create-function</command>.</para>

      <para>The command will ask you for the name of your api and the name and
      the description of your function. The script will then create a new
      <filename>&lt;function name&gt;.fnc</filename> file in the directory
      <filename>apis/&lt;api name&gt;/spec</filename> with the content
      :<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE function PUBLIC "-//XINS//DTD Function 3.0//EN"
          "http://www.xins.org/dtd/function_3_0.dtd"&gt;

&lt;function name="MyFunction" rcsversion="$Revision: 1.106 $" rcsdate="$Date: 2013/01/23 10:00:59 $"&gt;

  &lt;description&gt;Description of the function.&lt;/description&gt;

&lt;/function&gt;</screen></para>

      <para>If the file was created without calling the
      <literal>create-function</literal> target, add the line
      <literal>&lt;function name="MyFunction"/&gt;</literal> in the
      <filename>api.xml</filename> file.</para>
    </sect2>
  </sect1>

  <sect1 id="compile.run.project">
    <title>Compiling and running the project</title>

    <para>Now we have a simple project with a function that, for the moment,
    does nothing.</para>

    <para>From the specification files XINS can generate :</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Specification documentation.</emphasis></para>

        <para>The specification documentation is a set of static HTML pages
        containing the description of your specification. It lists all APIs,
        functions, types and error codes. The pages also provide an easy way
        to call your function using the web application.</para>
      </listitem>

      <listitem>
        <para><emphasis>A web application</emphasis>.</para>

        <para>The web application is packaged as a WAR file that you can
        deploy in any servlet container. Once the WAR file is deployed, you
        can access your API through HTTP.</para>
      </listitem>

      <listitem>
        <para><emphasis>The client-side API</emphasis>.</para>

        <para>The client API is a JAR file that can be used to invoke remotely
        the API functions from Java programs. It features various advanced
        features, such as load-balancing, fail-over, extensive logging,
        etc...</para>
      </listitem>

      <listitem>
        <para><emphasis>The Javadoc</emphasis>.</para>

        <para>The Javadoc contains the definition of the API for the Java
        classes, including the generated classes. The javadoc can be generated
        either for the server side classes or the client side classes.</para>
      </listitem>
    </itemizedlist>

    <sect2 id="specdocs">
      <title>The HTML specification documentation</title>

      <para>To generate the HTML specification documentation (also called
      <literal>specdocs</literal>) execute <command>xins
      specdocs-myproject</command>.</para>

      <para>This will generate a set of static HTML pages that you can view by
      opening the file
      <filename><filename>build\specdocs\index.html</filename></filename>.</para>

      <para>The HTML pages contain:</para>

      <itemizedlist>
        <listitem>
          <para>An overview with a description of the different functions,
          types and error codes used in your API.</para>
        </listitem>

        <listitem>
          <para>A link for each environment to the meta functions
          <function>_GetVersion</function>,
          <function>_GetStatistics</function> and
          <function>_GetSettings</function>.</para>
        </listitem>

        <listitem>
          <para>For each function, a description of the input parameters,
          output parameters, the validation rules and the possible result
          codes for this function.</para>
        </listitem>

        <listitem>
          <para>For each function, a test form page to test the
          function.</para>
        </listitem>

        <listitem>
          <para>For each example in the function, a description of the URL
          request, the expected result for this example and the links to
          execute the example on the given environments.</para>
        </listitem>

        <listitem>
          <para>For each of the types, a description of the type. If the type
          is an enumeration, the possible values are written. If the type is a
          pattern then the regular expression for the pattern is written along
          with a link to test the provided pattern.</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 id="web.application">
      <title>The web application.</title>

      <sect3 id="create.web.application">
        <title>Create the web application</title>

        <para>The web application is packaged as a WAR file. When this WAR
        file is deployed on the servlet container, your functions are
        accessible through HTTP (for example using Internet Explorer).</para>

        <para>To create the web application, execute <command>xins
        war-myproject</command>.</para>

        <para>This command will create a <filename>myproject.war</filename>
        file in the directory
        <filename>build\webapps\myproject\</filename>.</para>

        <para>This target also generates the skeleton file for the
        implementation, if the file did not exist. In our example the file
        will be
        <filename>apis\myproject\impl\com\mycompany\myproject\api\MyFunctionImpl.java</filename>.</para>

        <para>You can set some compilation and running properties by creating
        a <filename>build.properties</filename> file in your project directory
        and set any of the following properties in the file:</para>

        <table id="build.properties.table">
          <title>build.properties properties</title>

          <tgroup cols="3">
            <tbody>
              <row>
                <entry>Property name</entry>

                <entry>Description</entry>

                <entry>Example</entry>
              </row>

              <row>
                <entry>build.compiler</entry>

                <entry>The compiler to use to compile the classes. (Defaults
                to javac)</entry>

                <entry>build.compiler=jikes</entry>
              </row>

              <row>
                <entry>build.deprecation</entry>

                <entry>Warn if deprecated methods are used. (Defaults to
                true)</entry>

                <entry>build.deprecation=false</entry>
              </row>

              <row>
                <entry>build.java.version</entry>

                <entry>The version of Java where the code will be
                executed.</entry>

                <entry>build.java.version=1.3</entry>
              </row>

              <row>
                <entry>org.xins.server.config</entry>

                <entry>The location to the runtime properties file. Slash and
                backslash in the property value are translated with the system
                path separator in XINS. The location can also be a
                URL.</entry>

                <entry>org.xins.server.config=../xins.properties</entry>
              </row>

              <row>
                <entry>servlet.port</entry>

                <entry>The port number for the XINS servlet container
                (Defaults to 8080).</entry>

                <entry>servlet.port=8181</entry>
              </row>

              <row>
                <entry>jmx.port</entry>

                <entry>The port number for JMX monitoring (Defaults to
                1090).</entry>

                <entry>jmx.port=2222</entry>
              </row>

              <row>
                <entry>test.environment</entry>

                <entry>The environment upon which the tests should be executed
                (Defaults http://localhost:8080/).</entry>

                <entry>test.environment=http://integration.mycompany.com/myproject/</entry>
              </row>

              <row>
                <entry>test.start.server</entry>

                <entry>Flag to indicate that the API should be started when
                the tests are executed (Defaults to false).</entry>

                <entry>test.start.server=true</entry>
              </row>

              <row>
                <entry>wsdl.endpoint</entry>

                <entry>The endpoint to use in the generated WSDL file
                (Defaults to the first entry of the
                <filename>environment.xml</filename> file)</entry>

                <entry>wsdl.endpoint=http://www.mycompany.com/myproject/</entry>
              </row>

              <row>
                <entry>reload.stylesheet</entry>

                <entry>A work around property for Xerces library that produces
                sometimes <errortext>putDocumentInCache</errortext>
                errors.</entry>

                <entry>reload.stylesheet=true</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>These properties can also be passed to the system by using
        <literal>-D&lt;property name&gt;=&lt;property value&gt;</literal> on
        the command line.</para>
      </sect3>

      <sect3 id="run.web.application">
        <title>Run the web application</title>

        <para>To run the web application, execute <command>xins
        run-myproject</command>.</para>

        <para>It is adviced to execute the web application with a specified
        runtime properties file. If no file is specified, only the local
        machine will have access to the API. For more information go to the
        runtime properties section.</para>

        <para>You can also start the API using <command>java
        [-Dorg.xins.server.config=&lt;runtime property file&gt;] -jar
        myproject.war [-port=&lt;port number&gt;] [-gui]</command>. It is not
        needed to have XINS or Ant installed to run the API. The requester or
        the API or the testers for the API can receive the WAR file and
        execute it. The -gui option will start a user interface where the
        system output will be logged in a console.</para>

        <para>To start the WAR file using the <literal>Jetty</literal> servlet
        container, create a file named <filename>myproject.xml</filename> int
        the projects directory with the following content :</para>

        <screen>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;!DOCTYPE Configure PUBLIC
 "-//Mort Bay Consulting//DTD Configure 1.2//EN"
 "http://jetty.mortbay.org/configure_1_2.dtd"&gt;

&lt;Configure class="org.mortbay.jetty.Server"&gt;

  &lt;Call name="addListener"&gt;
    &lt;Arg&gt;
      &lt;New class="org.mortbay.http.SocketListener"&gt;
        &lt;Set name="port"&gt;8080&lt;/Set&gt;
      &lt;/New&gt;
    &lt;/Arg&gt;
  &lt;/Call&gt;

  &lt;Call name="addWebApplication"&gt;
    &lt;Arg&gt;/myproject/&lt;/Arg&gt;
    &lt;Arg&gt;build/webapps/myproject/myproject.war&lt;/Arg&gt;
  &lt;/Call&gt;

&lt;/Configure&gt;</screen>

        <para>Then start <command>java
        -Dorg.xins.server.config=xins.properties -jar %JETTY_HOME%\start.jar
        myproject.xml</command> in the <filename>projects</filename>
        directory.</para>

        <para>Now execute your function by going to the address <ulink
        url="http://localhost:8080/myproject/?_function=MyFunction">http://localhost:8080/myproject/?_function=MyFunction</ulink>.</para>

        <para>As nothing is implemented in your method, your function will
        just return a successful result.</para>

        <para>If you want to get more information on your function or on XINS
        run the following meta functions :<itemizedlist>
            <listitem>
              <para><ulink
              url="http://localhost:8080/myproject/?_function=_GetVersion">http://localhost:8080/myproject/?_function=_GetVersion</ulink></para>
            </listitem>

            <listitem>
              <para><ulink
              url="http://localhost:8080/myproject/?_function=_GetStatistics">http://localhost:8080/myproject/?_function=_GetStatistics</ulink></para>
            </listitem>

            <listitem>
              <para><ulink
              url="http://localhost:8080/myproject/?_function=_GetSettings">http://localhost:8080/myproject/?_function=_GetSettings</ulink></para>
            </listitem>
          </itemizedlist></para>

        <note>
          <para>If you want to run the example in tomcat, you need to copy the
          <filename>demo\build\webapps\myproject\myproject.war</filename> to
          the <filename>tomcat\webapps</filename> directory and then start
          tomcat using the startup script. The URLs to access the functions
          will then start with
          <literal>http://localhost:8080/myproject/</literal>.</para>
        </note>
      </sect3>
    </sect2>

    <sect2 id="server.javadoc">
      <title>The server-side Javadoc</title>

      <para>To generate the Javadoc on the server-side execute <command>xins
      javadoc-api-myproject</command>.</para>

      <para>This will generate a set of static HTML pages that you can view by
      opening the file
      <filename><filename>build\javadoc-api\myproject\index.html</filename></filename>.</para>
    </sect2>

    <sect2 id="capi.example">
      <title id="capi_example">The client API</title>

      <para>To generate the jar file for the client API execute <command>xins
      jar-myproject</command>.</para>

      <para>This will generate a jar file located at
      <filename>build\capis\myproject-capi.jar</filename>.</para>

      <para>The following code shows how to use the generated CAPI to call a
      function. In this example, the <literal>myproject</literal> API is
      running on the same computer.</para>

      <para><programlisting>import org.xins.common.service.TargetDescriptor;

import com.mycompany.myproject.capi.CAPI;
import com.mycompany.myproject.capi.MyFunctionResult;

public class TestMyFunction {
   public final static void main(String[] args) throws Exception {

      // Create the descriptor for the service
      TargetDescriptor descriptor =
         new TargetDescriptor("http://localhost:8080/myproject/", 20000);

      // Create the CAPI instance
      CAPI project = new CAPI(descriptor);

      // Invoke the function
      MyFunctionResult result = project.callMyFunction();

      // No exceptions thown
      System.out.println("Call successful: " + result.getOutputMessage());
   }
}</programlisting></para>

      <para>It's also possible to invoke your API without using the generated
      CAPI file but by using the <classname>XINSServiceCaller</classname>.
      Examples on how to do it are provided in the <ulink
      url="javadoc/org/xins/client/XINSServiceCaller.html">XINSServiceCaller
      Javadoc</ulink>.</para>

      <para>The generated <methodname>callMyFunction</methodname> method can
      throw several kind of exceptions. For more information, refer to the
      generated CAPI Javadoc. Note that a subclass of the exception could be
      thrown. For example, if you want to catch the exception only when the
      function returns an error code, catch the
      <classname>org.xins.client.UnsuccessfulXINSCallException</classname>
      which is a subclass of the
      <classname>org.xins.client.XINSCallException</classname>.</para>

      <para>You can also catch all the exception at once by catching the class
      <classname>org.xins.common.service.CallException</classname>.</para>

      <programlisting>      try {
         // Invoke the function
         project.callMyFunction();
      } catch (UnsuccessfulXINSCallException ex) {
         System.out.println("A standard error occured: " + ex.getErrorCode());
      } catch (CallException ex) {
         System.err.println("Execution failed: " + ex.getMessage());
      }</programlisting>

      <para>Most of the time your function will have input parameters to pass
      to the function. This can be done by passing the parameters to the
      callMyFunction method:<programlisting>import com.mycompany.myproject.capi.CAPI;
import com.mycompany.myproject.types.Gender;
...
   MyFunctionResult result = project.callMyFunction(Gender.MALE, "Doe");</programlisting></para>

      <para>or to use the generated MyFunctionRequest object:<programlisting>import com.mycompany.myproject.capi.CAPI;
import com.mycompany.myproject.types.Gender;
...
   MyFunctionRequest request = new MyFunctionRequest();
   request.setGender(Gender.MALE);
   request.setPersonLastName("Doe");
   MyFunctionResult result = project.callMyFunction(request);</programlisting></para>

      <para>In the second case, you don't need to call the set method for the
      optional parameters that are not set whereas in the first case you need
      to pass null values.</para>

      <para>A new package <literal>org.xins.client.async</literal> has been
      added in XINS 1.4.0. This package provides you with some objects which
      facilitates the call to remote API asynchronously. For more information,
      read the article published at <ulink
      url="http://xins.sourceforge.net/asynchronous.html">http://xins.sourceforge.net/asynchronous.html</ulink>.</para>

      <para>As of XINS 1.5.0, it is also possible to call the API without
      using the HTTP connection but directly as a function call. You just need
      to pass the location of the war file containing the API. As no
      connection is involved, the time-out represents the total
      time-out:</para>

      <programlisting>TargetDescriptor descriptor =
         new TargetDescriptor("file:///home/myuser/myproject.war", 20000);</programlisting>

      <para>It is possible to specify the HTTP method to use
      (<literal>POST</literal> or <literal>GET</literal>, default is
      <literal>POST</literal>), or whether redirection returned HTTP code
      should be followed (default is <literal>false</literal> by using the
      <classname>XINSCallConfig</classname> class.</para>
    </sect2>

    <sect2 id="client.javadoc">
      <title>The client-side Javadoc</title>

      <para>To generate the Javadoc on the client-side execute <command>xins
      javadoc-capi-myproject</command>.</para>

      <para>This will generate a set of static HTML pages that you can view by
      opening the file
      <filename>build\javadoc-capi\myproject\index.html</filename>.</para>
    </sect2>

    <sect2 id="odf">
      <title>The Open Document Format</title>

      <para>The <ulink url="http://en.wikipedia.org/wiki/OpenDocument">Open
      Document Format</ulink> is a standard for word processors documents
      (similar to .doc). XINS contains a target that can generate the
      specifications of an API in this format.</para>

      <para>To create the document, execute <command>xins
      opendoc-myproject</command>.</para>

      <para>This will generate a
      <filename>build\opendoc\myproject\myproject-specs.odt</filename> file
      than can be opened with for example <ulink
      url="http://www.openoffice.org/">Open Office</ulink>. Note that Open
      Office is free and can save your document as a MS Word document or as
      PDF.</para>
    </sect2>
  </sect1>

  <sect1 id="implementation">
    <title>Implementing the method</title>

    <para>For the moment our function has no input, no output and no
    implementation, we will adapt our previous project to add a minimum of
    functionalities.</para>

    <sect2 id="input">
      <title>Defining Input, Output.</title>

      <para>Let's add to our project three input fields and a result with one
      output field.</para>

      <para>When you are adding input and output parameters to your function,
      you should at the same time declare the type of your parameter. There
      are two kinds of types, the ones already defined in XINS and the ones
      you create. The types already defined in XINS are explained in the next
      chapter.</para>

      <para>To create a new type for your project execute <command>xins
      create-type</command>.</para>

      <para>The command will ask you for the name of the API, the name of the
      type and the description of the type. It will then create a new
      <filename>&lt;type name&gt;.typ</filename> file with the content
      :</para>

      <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE type PUBLIC "-//XINS//DTD Type 3.0//EN"
"http://www.xins.org/dtd/type_3_0.dtd"&gt;

&lt;type name="TypeName"
rcsversion="$Revision: 1.106 $" rcsdate="$Date: 2013/01/23 10:00:59 $"&gt;

  &lt;description&gt;Description of the type.&lt;/description&gt;

&lt;/type&gt;</screen>

      <para>The different possibilities of types that could be defined are
      listed in <xref linkend="defined.types"/>.</para>

      <para>Let's create two types for our project, one with the type
      <varname>lastName</varname> and one with the type
      <varname>gender</varname>.</para>

      <para>Edit the <filename>LastName.typ</filename> file with</para>

      <screen>  &lt;description&gt;Last name of a person.&lt;/description&gt;
  &lt;pattern&gt;[A-Za-z ]{1,50}&lt;/pattern&gt;</screen>

      <para>Edit the <filename>Gender.typ</filename> with</para>

      <screen>  &lt;description&gt;A gender.&lt;/description&gt;
  &lt;enum&gt;
    &lt;item name="male"   value="m" /&gt;
    &lt;item name="female" value="f" /&gt;
  &lt;/enum&gt;</screen>

      <remark>If the name attribute is not specified it will be the same as
      the value attribute.</remark>

      <para>Now that the types are created, we need to add the declaration in
      <filename>api.xml</filename> and to set them as input parameters in our
      function. For the output we will use a predefined type so there is no
      need to define the type in <filename>api.xml</filename>.</para>

      <para>Add <literal>&lt;type name="Gender"/&gt;</literal> and
      <literal>&lt;type name="LastName"/&gt;</literal> to
      <filename>api.xml</filename>.</para>

      <para>Add to the file <filename>MyFunction.fnc</filename> :<screen>&lt;input&gt;
  &lt;param name="gender" required="true" type="Gender"&gt;
    &lt;description&gt;The gender of the person.&lt;/description&gt;
  &lt;/param&gt;
  &lt;param name="personLastName" required="true" type="LastName"&gt;
    &lt;description&gt;The last name of the person.&lt;/description&gt;
  &lt;/param&gt;
&lt;/input&gt;
&lt;output&gt;
  &lt;param name="message" required="true" type="_text"&gt;
    &lt;description&gt;The message returned to this person.&lt;/description&gt;
  &lt;/param&gt;
&lt;/output&gt;</screen></para>

      <para>You can also assign a default value for an optional parameter
      using the <literal>default</literal> attribute.<screen>  &lt;param name="gender" required="false" type="Gender" default="m"&gt;
    &lt;description&gt;The gender of the person.&lt;/description&gt;
  &lt;/param&gt;</screen></para>
    </sect2>

    <sect2 id="test.environments">
      <title>Defining the test environments.</title>

      <para>You can specify in XINS the environments where you want to test
      the API.</para>

      <para>As seen in <xref linkend="api.xml"/>, it's possible create the
      file containing the test environments by using the <command>xins
      create-api</command> or by creating the file with a text editor and
      editing the <filename>xins-project.xml</filename>.</para>

      <para>When you generate the specification documentation, for each
      function defined in the API a link below "Test forms" that points you to
      a HTML form which is used to fill the input parameters of the function.
      When you then click on Submit the function will be executed on the
      specified environment. This requires of course that the application is
      installed on the defined environment.</para>

      <para>The environments are also listed on the main page of the
      specification documentation along with some links that provide direct
      access to some meta functions.</para>

      <para>If you want to add a new environment, just add for example
      <literal>&lt;environment id="production"
      url="http://www.mycompany.com:8080/my-project/" /&gt;</literal> to
      <filename>environments.xml</filename>.</para>
    </sect2>

    <sect2 id="defining.examples">
      <title>Defining the examples.</title>

      <para>You can also define some examples for your API in the
      specification. The definition of the examples are done in the function
      specification file.</para>

      <para>Let's add some examples to <filename>MyFunction.fnc</filename> by
      adding the following text after the <literal>output</literal>
      section:<screen>&lt;example resultcode="_InvalidRequest"&gt;
  &lt;description&gt;Missing parameter : lastName&lt;/description&gt;
  &lt;input-example name="gender"&gt;m&lt;/input-example&gt;
&lt;/example&gt;
&lt;example resultcode="_InvalidRequest"&gt;
  &lt;description&gt;Invalid parameter&lt;/description&gt;
  &lt;input-example name="gender"&gt;m&lt;/input-example&gt;
  &lt;input-example name="personLastName"&gt;Bond 007&lt;/input-example&gt;
&lt;/example&gt;
&lt;example&gt;
  &lt;description&gt;Message returned.&lt;/description&gt;
  &lt;input-example name="gender"&gt;f&lt;/input-example&gt;
  &lt;input-example name="personLastName"&gt;Lee&lt;/input-example&gt;
  &lt;output-example name="message"&gt;Hello Miss Lee&lt;/output-example&gt;
&lt;/example&gt;</screen></para>

      <para>This example shows how to add some examples to a function with
      <literal>input</literal> and <literal>output</literal> parameters but
      it's also possible to define examples for a function that contains a
      data section or returns a result code that contains some parameters. For
      more information, look at the function specification defined in the
      <literal>allinone</literal> project.</para>

      <para>The examples are shown on the generated specification
      documentation and if you have also defined some environments, you can
      execute the example by just clicking the provided links.</para>

      <para>In XINS 1.4.0, you can create an example using <command>xins
      create-example</command>. The API should be running on
      http://localhost:8080/&lt;api name&gt;/. The create-example target will
      ask you for the name of the API and the request URL. The example is
      automatically added to the function.</para>
    </sect2>

    <sect2 id="impl.function">
      <title>Implementing your function.</title>

      <para>You can edit the new <filename>MyFunctionImpl.java</filename>
      generated file located in the
      <filename>apis\myproject\impl\com\mycompany\myproject\api</filename>
      directory with</para>

      <programlisting>   public final Result call(Request request) throws Throwable {

      String nomination = null;
      if (request.getGender().equals(com.mycompany.myproject.types.Gender.MALE)) {
         nomination = "Mister";
      } else {
         nomination = "Miss";
      }
      SuccessfulResult result = new SuccessfulResult();
      result.setMessage("Hello " + nomination + " " +request.getPersonLastName());
      return result;
   }</programlisting>
    </sect2>

    <sect2 id="execute.function">
      <title>Executing your function</title>

      <para>We first need to rebuild the WAR file, the spec docs, the client
      jar and the javadoc by executing <command>xins
      all-myproject</command>.</para>

      <para>Now you must restart the servlet container server and reopen the
      file <filename>build\specdocs\index.html</filename>. You can test your
      function by either clicking on the link provided with the examples or by
      using the test forms.</para>
    </sect2>
  </sect1>

  <sect1 id="error.code">
    <title>The error code</title>

    <para>An error code (previously named result code) contains the
    description of an error that occurred when executing the implementation
    code.</para>

    <para>When you generate the specification documentation, you can already
    notice that some error codes already exist by default. These error codes
    are returned by the system when the problem occurs.</para>

    <para>You should create custom error codes whenever the implementation of
    your function would encounter an error condition that should be
    distinguishable for the caller. For example, if you connect to another
    service, if you perform I/O operations or if the input fields should match
    fields in a database.</para>

    <para>We will now extend our example with a <literal>NoVowel</literal>
    error code. Note that this error could be also detected by improving the
    <literal>lastName</literal> pattern.</para>

    <para>Create a error code by executing <command>xins
    create-rcd</command>.</para>

    <para>The command will ask you for the name of your api and the name and
    the description of your error code. The script will then create a new
    <filename>NoVowel.rcd</filename> file in the directory
    <filename><filename>&lt;specsdir&gt;/&lt;api
    name&gt;</filename></filename> with the content :<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE resultcode PUBLIC "-//XINS//DTD Result Code 3.0//EN"
          "http://www.xins.org/dtd/resultcode_3_0.dtd"&gt;

&lt;resultcode name="NoVowel"
            rcsversion="$Revision: 1.106 $" rcsdate="$Date: 2013/01/23 10:00:59 $"&gt;

  &lt;description&gt;The name does not contain any vowels.&lt;/description&gt;

&lt;/resultcode&gt;</screen></para>

    <para>Once this file is created, add the line <literal>&lt;resultcode
    name="NoVowel" /&gt;</literal> in the <filename>api.xml</filename> file. A
    reference to this error code also needs to be defined in the function that
    may return this error code. In our case
    <filename>MyFunction.fnc</filename>. Also add the line
    <literal>&lt;resultcode-ref name="NoVowel" /&gt;</literal> at the
    beginning of the <literal>output</literal> section of
    <filename>MyFunction.fnc</filename>.</para>

    <para>Now we need to adapt our Java code to detect if the given last name
    does not include any vowels and return the error code when it is the case.
    Add the following code at the beginning of your
    <methodname>call()</methodname> method.</para>

    <programlisting>String lastNameLower = request.getPersonLastName().toLowerCase();
if (lastNameLower.indexOf('a') == -1 &amp;&amp; lastNameLower.indexOf('e') == -1 &amp;&amp;
    lastNameLower.indexOf('i') == -1 &amp;&amp; lastNameLower.indexOf('o') == -1 &amp;&amp;
    lastNameLower.indexOf('u') == -1 &amp;&amp; lastNameLower.indexOf('y') == -1) {
      return new NoVowelResult();
}</programlisting>

    <para>Now we need to adapt the specification of your function to include
    this result code in the examples. We moved the example 3 to example 4 as
    we wanted to keep the order "unsuccessful results" "successful results" in
    our examples and we added the example 3 with <screen>&lt;example resultcode="NoVowel"&gt;
  &lt;description&gt;The name does not contain any vowels.&lt;/description&gt;
  &lt;input-example name="gender"&gt;f&lt;/input-example&gt;
  &lt;input-example name="personLastName"&gt;qslkfj&lt;/input-example&gt;
&lt;/example&gt;</screen></para>

    <para>You can now regenerate everything with <command>xins
    all-myproject</command> and after restarting the servlet container server,
    test the new example using the generated specification
    documentation.</para>

    <para>It is possible to have parameters and a data section in the error
    code. To do it, add an <literal>output</literal> element to the error
    code. For the examples in the specification and setting the values in the
    implementation, just do it as you would do for a function with output
    parameters or data section. The <literal>allinone</literal> example
    contains a <literal>AlreadySet</literal> error code with one
    parameter.</para>

    <para>Since XINS 1.4.0, it is possible to specify if an error code is
    functional or technical. Functional error code are error that may occur
    such as <literal>InvalidPassword</literal> where as technical errors
    indicate a problem such as <literal>DatabaseCorrupted</literal>. By
    default an error code is technical. To specify the error code as
    functional add the attribute <literal>type="functional"</literal> to the
    <literal>resultcode</literal> element.</para>

    <para>If you want to reuse an error code already defined in another API,
    you don't need to copy the file. You can also point to the error code of
    the API. Its uses the same system as in <xref
    linkend="shared.types"/>.</para>

    <para>XINS also has predefined error code that are returned when something
    went wrong.</para>

    <table>
      <title>XINS defined error code</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry>Error code</entry>

            <entry>Description</entry>
          </row>

          <row>
            <entry>_DisabledFunction</entry>

            <entry>The function is currently disabled.</entry>
          </row>

          <row>
            <entry>_InternalError</entry>

            <entry>There was an internal error.</entry>
          </row>

          <row>
            <entry>_InvalidRequest</entry>

            <entry>Indicates that the request is considered invalid since it
            does not match the criteria defined by the specification.</entry>
          </row>

          <row>
            <entry>_InvalidResponse</entry>

            <entry>Indicates that the implementation produced a response that
            does not match the criteria defined by the specification. Typical
            callers should treat this like an internal error.</entry>
          </row>

          <row>
            <entry>_DisabledFunction</entry>

            <entry>The function is currently disabled.</entry>
          </row>

          <row>
            <entry>_DisabledAPI</entry>

            <entry>The API is currently disabled.</entry>
          </row>

          <row>
            <entry>_FunctionNotSpecified</entry>

            <entry>Indicates that the request does not contain which function
            should be called.</entry>
          </row>

          <row>
            <entry>_FunctionNotFound</entry>

            <entry>Indicates that the function of the request does not
            exist.</entry>
          </row>

          <row>
            <entry>_InvalidRequestFormat</entry>

            <entry>Indicates that the input format is invalid for the calling
            convention.</entry>
          </row>

          <row>
            <entry>_NotAllowed</entry>

            <entry>Indicates that the user is not allowed to call the
            function.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="xins.properties">
    <title>The runtime properties</title>

    <para>You may want to add some flexibility to your application by changing
    a property without needing to recompile the code or restarting the server.
    This way you can distribute the same WAR file of your web application to
    different places. You can think at the following situations:</para>

    <itemizedlist>
      <listitem>
        <para>A file location may differ on the computers on which you want to
        deploy your application.</para>
      </listitem>

      <listitem>
        <para>The location of a database may differ depending on whether you
        want to test your application or deploy it in a production
        environment.</para>
      </listitem>

      <listitem>
        <para>A username/password which you don't know the value and should be
        entered by the administrator.</para>
      </listitem>

      <listitem>
        <para>A link to another XINS service, in case of a distributed
        environment.</para>
      </listitem>

      <listitem>
        <para>You would like to adjust settings that influence
        performances.</para>
      </listitem>

      <listitem>
        <para>You would like to adjust the debugging level.</para>
      </listitem>
    </itemizedlist>

    <para>The properties for your APIs are defined in the runtime properties
    file often named <filename>xins.properties</filename>. This file location
    is passed to the application server with the system property
    <literal>org.xins.server.config</literal>.</para>

    <para>To start the WAR file using the XINS servlet container, just execute
    <command>xins -Dorg.xins.server.config=xins.properties
    run-myproject</command>. You can also set the location of the
    <filename>xins.properties</filename> in the
    <filename>build.properties</filename> and then execute <command>xins
    run-myproject</command>.</para>

    <note>
      <para>If you want to run the example in tomcat, you need to add in the
      file <filename>tomcat\conf\catalina.properties</filename> the line
      <literal>org.xins.server.config=c:\\Program\
      Files\\xins\\demo\\xins.properties</literal>.</para>
    </note>

    <para>Example of runtime properties file:<screen>#_____________________________________________________________________________
# General XINS properties

# Check configuration file every 60 seconds
org.xins.server.config.reload=60

# Access rules
org.xins.server.acl=allow 127.0.0.1 *;

# Logging properties
org.xins.logdoc.locale=en_US</screen></para>

    <para>An example is also provided in the
    <filename>demo\xins.properties</filename> file.</para>

    <para>It's also possible to define a different runtime property file for
    each API you are running on the servlet container. To define a specific
    runtime property file for an API, use
    <property>org.xins.server.config.&lt;api name&gt;</property> instead of
    <property>org.xins.server.config</property>.</para>

    <sect2 id="properties">
      <title>The properties</title>

      <para>Some properties defined in this file are already interpreted by
      the system:</para>

      <table id="runtime.properties.table">
        <title>xins.properties runtime properties</title>

        <tgroup cols="4">
          <tbody>
            <row>
              <entry>Property name</entry>

              <entry>Required</entry>

              <entry>Description</entry>

              <entry>Example</entry>
            </row>

            <row>
              <entry>org.xins.server.config.reload</entry>

              <entry>no, defaults to 60.</entry>

              <entry>Interval in seconds for check the xins.properties file
              for any changes.</entry>

              <entry>org.xins.server.config.reload=60</entry>
            </row>

            <row>
              <entry>org.xins.server.acl</entry>

              <entry>no, defaults to localhost.</entry>

              <entry>Access rules for the functions</entry>

              <entry>org.xins.server.acl=allow 127.0.0.1 *; \ allow
              192.168.0.0/24 MyFunction</entry>
            </row>

            <row>
              <entry>org.xins.server.acl.&lt;api name&gt;</entry>

              <entry>no</entry>

              <entry>Access rules for the functions of the specified API. The
              specified rules are executed before the generic one.</entry>

              <entry>org.xins.server.acl.myproject=allow 127.0.0.1 *; \ deny
              192.168.0.0/24 MyFunction</entry>
            </row>

            <row>
              <entry>org.xins.server.config.include</entry>

              <entry>no</entry>

              <entry>A comma separated list of runtime property files to
              include. The files should use relative paths.</entry>

              <entry>org.xins.server.config.include=../default-xins.properties</entry>
            </row>

            <row>
              <entry>org.xins.logdoc.locale</entry>

              <entry>no, defaults to en_US.</entry>

              <entry>The locale to be used for the logging messages.</entry>

              <entry>org.xins.logdoc.locale=en_US</entry>
            </row>

            <row>
              <entry>org.xins.server.jmx</entry>

              <entry>no, false by default.</entry>

              <entry>Enables the management of the API using JMX (Java
              Management eXtension).</entry>

              <entry>org.xins.server.jmx=true</entry>
            </row>

            <row>
              <entry>org.xins.server.contextID.filter</entry>

              <entry>no, all types of context ID are accepted by
              default.</entry>

              <entry>The regular expression pattern for the expected format of
              the context ID. If the context ID is invalid, a new one will be
              generated.</entry>

              <entry>org.xins.server.contextID.filter=[a-zA-Z]{5}</entry>
            </row>

            <row>
              <entry>org.xins.server.logging.init</entry>

              <entry>no, true by default</entry>

              <entry>Initialize the logdoc logging</entry>

              <entry>org.xins.server.logging.init=false</entry>
            </row>

            <row>
              <entry>org.xins.server.contextID.push</entry>

              <entry>no, true by default</entry>

              <entry>Push the contextID to the NDC</entry>

              <entry>org.xins.server.contextID.push=false</entry>
            </row>

            <row>
              <entry>org.xins.logdoc.stackTraceAtMessageLevel</entry>

              <entry>no, defaults to false meaning that the stack traces are
              logged at DEBUG level.</entry>

              <entry>Flag indicating that the exception stack trace should be
              logged at the same level as the message.</entry>

              <entry>org.xins.logdoc.stackTraceAtMessageLevel=true</entry>
            </row>

            <row>
              <entry>log4j.*</entry>

              <entry>no, defaults to console.</entry>

              <entry>Logging properties used to adapt the debug level,
              formatting or output to your needs.</entry>

              <entry>log4j.rootLogger=DEBUG, console</entry>
            </row>

            <row>
              <entry>log4j.&lt;api name&gt;.rootLogger</entry>

              <entry>no, defaults to log4j.rootLogger.</entry>

              <entry>Root logger for the specified API.</entry>

              <entry>log4j.myproject.rootLogger=INFO,
              logfile_myproject</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 id="get.properties">
      <title>Getting properties value</title>

      <para>Now we will adapt the <filename>xins.properties</filename> for the
      <classname>MyFunction</classname> implementation by adding the following
      lines:</para>

      <screen># Salutation message for the person
salutation=Hello</screen>

      <para>We now need to change the implementation to read and use the
      property. Note that the property should be able to be changed at
      runtime. Add the following code to
      <filename>MyFunctionImpl.java</filename></para>

      <programlisting>import org.xins.common.collections.MissingRequiredPropertyException;
import org.xins.common.collections.InvalidPropertyValueException;
import org.xins.common.manageable.BootstrapException;
import org.xins.common.manageable.InitializationException;

...
   /**
    * The salutation message.
    */
   private String _salutation;

   protected void initImpl(Map&lt;String, String&gt; properties)
   throws MissingRequiredPropertyException,
          InvalidPropertyValueException,
          InitializationException {

      // Get the salutation
      _salutation = properties.get("salutation");
      if (_salutation == null || _salutation.trim().equals("")) {
         throw new MissingRequiredPropertyException("salutation");
      }
      // Here you can also chack the value and throw an
      // InvalidPropertyValueException if needed
   }

   public final Result call(Request request) throws Throwable {
...
      result.setMessage(_salutation + " " + nomination + " " +
                        request.getPersonLastName());
      return result;
   }</programlisting>

      <para>Now recompile your code, restart the server, execute the function,
      change the value in <filename>xins.properties</filename> to Hi, wait for
      the server to reload the properties file and execute the function
      again.</para>

      <para>The API class defines a <methodname>deinitImpl()</methodname>
      method. This method is used to release resources when you stop the
      API.<note>
          <para>When the xins.properties file has changed, only the
          <methodname>initImpl()</methodname> method is invoked. The
          <methodname>deinitImpl()</methodname> is called only when you stop
          the servlet container.</para>
        </note></para>

      <para>The API class has a <methodname>bootstrapImpl2(Map&lt;String,
      String&gt; buildSettings)</methodname> method that is called the API is
      started. The buildSettings passed as parameters are the properties
      stored in the <filename>web.xml</filename> file included in the
      deployment war file.</para>

      <para>The API class has a <methodname>reinitializeImpl()</methodname>
      method. This method can be invoked in your implementation to ask the
      framework to reinitialize the API.</para>
    </sect2>

    <sect2 id="defining.properties">
      <title>Defining properties</title>

      <para>XINS 1.3.0 includes a new system that allows to define runtime
      properties that you will use in your API in the
      <filename>impl.xml</filename> file. In this file you define the name of
      the property, its description, its type and whether is property is
      required or optional. The value of the property still needs to be
      defined in the <filename>xins.properties</filename> file.</para>

      <para>Example:</para>

      <screen>&lt;impl&gt;
  &lt;runtime-properties&gt;
    &lt;property name="myproject.eurodollar.rate" type="_float32" required="true"&gt;
      &lt;description&gt;The price in dollars of 1 euro.&lt;/description&gt;
    &lt;/property&gt;
  &lt;/runtime-properties&gt;
&lt;/impl&gt;</screen>

      <para>Now when the specification documentation is generated, a new page
      is available containing the list of the runtimes properties used by the
      API along with their description, their type and whether the property is
      required or optional. This page makes it easier to deploy an API with
      the correct runtime properties set.</para>

      <para>Another advantage of defining the properties this way is that you
      don't need to implement the <methodname>initImpl</methodname> method to
      retreive the property values. A class is generated that checks and
      retreives the properties. If the value of a property is incorrect or a
      required property is missing then the API will fail with a description
      of the problem. The <methodname>getAPI().getProperties()</methodname>
      method can also be called from the <methodname>initImpl</methodname>
      method of your function, if you want for example initialize another
      object based on a runtime property.</para>

      <para>Example on how to use the generated class:</para>

      <programlisting>   // No imports needed, no initImpl method needed

   public final Result call(Request request) throws Throwable {
      SuccessfulResult result = new SuccessfulResult();
      result.setPriceInEuro(request.getPriceInDollar() /
         ((RuntimeProperties) getAPI().getProperties()).getMyprojectEurodollarRate());
      return result;
   }</programlisting>

      <para>If the property was optional, a
      <classname>java.lang.Float</classname> object would have been
      returned.</para>
    </sect2>
  </sect1>

  <sect1 id="bootstrap.properties">
    <title>The bootstrap properties</title>

    <para>The bootstrap properties are the properties defined in the generated
    <filename>web.xml</filename> file. These properties cannot be modified at
    runtime. You can view the properties by calling the calling the meta
    function <literal>_GetSettings</literal>. When the WAR file is created
    XINS set some default properties which are:</para>

    <informaltable>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>org.xins.api.name</entry>

            <entry>The name of the API.</entry>
          </row>

          <row>
            <entry>org.xins.api.build.version</entry>

            <entry>The version of XINS with which the WAR file was
            created.</entry>
          </row>

          <row>
            <entry>org.xins.api.version</entry>

            <entry>The version of the API (may be empty).</entry>
          </row>

          <row>
            <entry>org.xins.api.build.time</entry>

            <entry>The time at which the WAR file was created.</entry>
          </row>

          <row>
            <entry>org.xins.api.calling.convention</entry>

            <entry>The name of the default calling convention.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>You can also define your own properties. Just add
    <literal>&lt;bootstrap-properties&gt;</literal> and
    <literal>&lt;bootstrap-property&gt;</literal> elements to the
    <filename>impl.xml</filename> file.</para>

    <para>Example:<screen>&lt;impl&gt;
  &lt;bootstrap-properties&gt;
    &lt;bootstrap-property name="xiff.login.page"&gt;Login&lt;/bootstrap-property&gt;
    &lt;bootstrap-property name="xiff.default.command"&gt;DefaultCommand&lt;/bootstrap-property&gt;
  &lt;/bootstrap-properties&gt;
&lt;/impl&gt;</screen></para>

    <note>
      <para>Bootstrap properties starting with <literal>org.xins.</literal>
      are reserved except for the <literal>org.xins.server.config</literal>
      bootstrap property. This property could be set to indicate the location
      of the runtime properties file in the case that you cannot pass it in
      the command line of the Servlet container.</para>
    </note>

    <para>The values of the properties will be available in the
    <methodname>bootstrapImpl(Map&lt;String, String&gt;
    bootstrapProperties)</methodname> method of your functions and shared
    instances.</para>

    <note>
      <para>Since XINS 2.2 it is also possible to define in
      <filename>impl.xml</filename> extra XML elements you want to add to the
      generated <filename>web.xml</filename> file. Tou can think at elements
      such as <literal>context-param</literal>, <literal>filter</literal>,
      <literal>listener</literal>, ...</para>

      <para>To do it, use the following syntax (after runtime-properties):
      <screen>&lt;impl&gt;
  &lt;web-app element="context-param"&gt;
    &lt;![CDATA[
      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
      &lt;param-value&gt;/WEB-INF/applicationContext.xml,/WEB-INF/daoContext.xml&lt;/param-value&gt;
    ]]&gt;
  &lt;/web-app&gt;
  &lt;web-app element="listener" id="spring"&gt;
  &lt;![CDATA[
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
  ]]&gt;
  &lt;/web-app&gt;
&lt;/impl&gt;</screen></para>
    </note>
  </sect1>

  <sect1 id="cvs">
    <title>Integration with CVS / Subversion</title>

    <para>As you've probably already noticed all of our specification files
    have <literal>rcsversion="$</literal><literal>Revision$"</literal> and
    <literal>rcsdate="$</literal><literal>Date$"</literal> when the files are
    stored in a control version system such as CVS, the
    <literal>$</literal><literal>Revision$</literal> is replaced by something
    like <literal>$Revision 1.2 $</literal> and
    <literal>$</literal><literal>Date$</literal> with something like
    <literal>$Date 2006/11/13 15:16:47 $</literal>. This is particularly
    useful when you want to keep track of the version and the date of the last
    changes of the specification.</para>

    <para>XINS allows you also to freeze the different parts of the
    specification. This is particularly useful if the person or department
    using the API is not the same as the one designing it or implementing the
    API. This way the different parties can assume the required input or
    output parameters. If for some reasons a function or a type changes, the
    specification documentation would mark the function or type in red with a
    tag "broken freeze".</para>

    <para>To freeze a function, a type or a result code add the attribute
    freeze next to the name in <filename>api.xml</filename>. The value of this
    attribute should be the version of the frozen specification.</para>

    <para>For example</para>

    <screen>&lt;api name="myproject" owner="johnd"
rcsversion="$Revision: 1.106 $" rcsdate="$Date: 2013/01/23 10:00:59 $"&gt;
  &lt;function name="MyFunction" freeze="1.3" /&gt;

  &lt;type name="Gender" freeze="1.1" /&gt;
  &lt;type name="LastName" /&gt;

  &lt;resultcode name="NoVowel" freeze="1.2" /&gt;
&lt;/api&gt;</screen>

    <para>You can also specify in the <filename>xins-projects.xml</filename>
    the root of the <literal>cvsweb</literal> location:</para>

    <screen>&lt;cvsweb href="http://cvs.mycompany.com/cvsweb/myprojects" /&gt;</screen>

    <para>If this element is provided, broken freeze will provide you with a
    link where you will be able to see the changes done for this item since it
    has been frozen. If you use <literal>viewcvs</literal> only the first
    provided link will work.</para>
  </sect1>

  <sect1 id="dependencies">
    <title>Managing dependencies</title>

    <para>For advanced APIs, you would probably need to use some external
    libraries or to use other services. This can be done by adding
    dependencies to your API.</para>

    <para>In <filename>xins-projects.xml</filename> you can add an attribute
    <literal>dependenciesdir</literal> to indicate in which directory the jar
    files used by your project will be included. For example</para>

    <screen>&lt;project name="myprojects"
         rcsversion="$Revision: 1.106 $" rcsdate="$Date: 2013/01/23 10:00:59 $"
         dependenciesdir="../other-projects"
         domain="com.mycompany"&gt;
&lt;/project&gt;</screen>

    <para>In <filename>apis\&lt;api&gt;\impl\impl.xml</filename> you add the
    jar files needed for your project using the dependency element. For
    example</para>

    <screen>&lt;impl&gt;
  &lt;dependency dir="utils" /&gt;
  &lt;dependency dir="capis" includes="project2-capi.jar" /&gt;
  &lt;dependency dir="spring" includes="spring.jar" deploy="false" /&gt;
&lt;/impl&gt;</screen>

    <para>In the previous example when your implementation will be compiled
    the following jar files will be in the classpath:
    <literal>..\other-projects\utils\*.jar;..\other-projects\capis\project2-capi.jar;..\other-projects\xins\xins-client.jar</literal>.
    These files will also be included in the generated WAR file except for
    spring.jar. This <literal>deploy</literal> attribute has been introduced
    in XINS 2.2.</para>

    <para>An example of dependencies is provided in XINS with the
    <literal>filteredproject</literal> demo. This API calls another API
    (myproject) using CAPI.</para>

    <note>
      <para>The order of the elements in the imp.xml is important, if the
      elements are not in the correct order the validation of
      <filename>impl.xml</filename> with the DTD will fail.</para>

      <para>The order is <literal>logdoc, bootstrap-properties,
      runtime-properties, content, dependency, calling-convention,
      instance.</literal></para>
    </note>
  </sect1>

  <sect1 id="files.war">
    <title>Adding other files to the WAR file</title>

    <para>It is possible to add any kind of files to the WAR file. This is
    particulary useful if you want to deploy a web site at the same time as
    your API.</para>

    <para>To do it add content elements to the impl.xml file. Note that you'll
    need to also add a <literal>web-path</literal> attribute to the impl
    element because the API is by default mapped with the root path. So in
    order to access the file you have added to the WAR file, you will need to
    associate the API with another path.</para>

    <para>Example:<screen>&lt;impl web-path="store"&gt;
  &lt;content dir="apis/petstore" includes="xslt/*.xslt" /&gt;
  &lt;content dir="apis/petstore/web" includes="*.html *.js" /&gt;
  &lt;content dir="apis/petstore/web" includes="*.jpg" web-path="images" /&gt;
&lt;/impl&gt;</screen></para>

    <note>
      <para>If you only want to add files to the <filename>WEB-INF</filename>
      directory, for example to use them in your API, then you don't need to
      specify the <literal>web-path</literal> attribute to the
      <literal>impl</literal> element.</para>
    </note>
  </sect1>

  <sect1 id="multiple.implementations">
    <title>Multiple implementations and stubs</title>

    <para>XINS can support multiple implementations for the same API. To add a
    new implementation for the API add in the
    <filename>xins-projects.xml</filename> an <literal>impl</literal> element
    with a <literal>name</literal> attribute to the api. For example</para>

    <screen>&lt;project name="myprojects"
         domain="com.mycompany"&gt;
  &lt;api name="allinone"&gt;
    &lt;impl /&gt;
    &lt;impl name="mystub" /&gt;
  &lt;/api&gt;
&lt;/project&gt;</screen>

    <para>New targets are created for this implementation. Only server side
    targets (war, javadoc-api, run, ...) are created for this new
    implementation. The other targets only depend on the specification which
    doesn't change. The new target syntax is <literal>&lt;action&gt;-&lt;api
    name&gt;-&lt;implementation name&gt;</literal>. For example to compile the
    new implementation of the example above execute <command>xins
    classes-allinone-mystub</command>.</para>

    <note>
      <para>The list of the API names with the possible implementation is
      printed at the end of the execution of the <command>xins help</command>
      command.</para>
    </note>

    <para>Having the possibility to have more than one implementation is
    useful when you want to create a stub (fake API) so that other systems can
    test the API before being implemented.</para>

    <para>XINS offers the possibility to generate a stub implementation of the
    API. The stub is generated based on the examples defined in the function
    specification.</para>

    <para>To generate the stub implementation execute <command>xins
    stub-&lt;api name&gt;-&lt;implementation name&gt;</command>. Then the stub
    file are generated in the directory <filename>apis\&lt;api
    name&gt;\impl-&lt;implementation name&gt;\&lt;package name&gt;</filename>.
    You can also edit the generated code, for example to be more flexible with
    some input parameters or to return other values. Note that the stub target
    won't replace existing files.</para>
  </sect1>

  <sect1 id="testing">
    <title>Testing</title>

    <para>XINS offers different ways to test your API.</para>

    <para>The first way is using the generated test forms or the links
    provided with the examples on the function page of the generated
    specdocs.</para>

    <para>XINS offers also the possibility to test the API using the JUnit
    library. XINS will generate the unit test based on the examples defined in
    the functions specification. To be able to test your API proceed as
    follow:</para>

    <itemizedlist>
      <listitem>
        <para>Add a <literal>test</literal> element to the
        <literal>api</literal> element in the
        <filename>xins-projects.xml</filename>. For example:<screen>&lt;project name="myprojects"
         domain="com.mycompany"&gt;
  &lt;api name="allinone"&gt;
    &lt;impl /&gt;
    &lt;test /&gt;
  &lt;/api&gt;
&lt;/project&gt;</screen></para>
      </listitem>

      <listitem>
        <para>Run the API. For example: <command>xins
        run-allinone</command>.</para>
      </listitem>

      <listitem>
        <para>Execute the test target. For example: <command>xins
        test-allinone</command>.</para>
      </listitem>
    </itemizedlist>

    <para>The test target will generate the unit tests in the directory
    <filename>apis\&lt;api name&gt;\test\&lt;package name&gt;</filename>. The
    main test case executed is <filename>APITests.java</filename> which
    includes the function tests. One example matches one test.</para>

    <para>The generated unit tests are editable. You can adapt it to better
    fit the expected result or to add your own unit tests. Note that the test
    target won't overwrite files if the <filename>test</filename> directory
    already exists.</para>

    <para>The result of the unit tests is located in the directory
    <filename>build\testresults</filename>. Results are provided in XML and
    HTML. The XML contains the configuration settings and the logs generated.
    The HTML contains the results of the test in a more human readable
    format.</para>

    <para>To be able for the test target to work correctly, you have to copy
    the <filename>junit.jar</filename> file located in xins
    <filename>lib</filename> directory to the <filename>lib</filename>
    directory of ant.</para>

    <para>The test target also have an option to run the API before starting
    the tests. To use it, add <literal>test.start.server=true</literal> to the
    <filename>build.properties</filename>. If this option is set, you don't
    need to execute the <command>xins run-&lt;api name&gt;</command>
    command.</para>

    <para>If you want to execute the tests on another environment than you
    local machin, you can specify it in the
    <filename>build.properties</filename> by setting the properties
    <literal>test.environment</literal>.</para>

    <note>
      <para>The <literal>&lt;test /&gt;</literal> element should be added
      after the <literal>&lt;impl /&gt;</literal> and
      <literal>&lt;environments /&gt;</literal> elements if defined.</para>
    </note>
  </sect1>

  <sect1 id="categories">
    <title>Categories</title>

    <para>Sometimes an API can contains a lot of functions. It become then
    more difficult to find the function in the specdocs. XINS 1.3.0 introduced
    the notion of categories. With categories you can specify functions that
    belong together.</para>

    <para>Example:</para>

    <para>Define the category names at then end of
    <filename>api.xml</filename>:<screen>&lt;api name="allinone"&gt;
...
  &lt;category name="DataSections" /&gt;
&lt;/api&gt;</screen></para>

    <para>Then create a category file with the name <filename>&lt;category
    name&gt;.cat</filename>. This file will define the function that are in
    the same group.</para>

    <para>Example <filename>DataSections.cat</filename>:<screen>&lt;?xml version="1.0" encoding="US-ASCII"?&gt;
&lt;!DOCTYPE category PUBLIC "-//XINS//DTD Category 1.3//EN" "http://www.xins.org/dtd/category_1_3.dtd"&gt;
&lt;category name="DataSections"&gt;
  &lt;description&gt;Data section related functions.&lt;/description&gt;
  &lt;function-ref name="DataSection" /&gt;
  &lt;function-ref name="DataSection2" /&gt;
  &lt;function-ref name="DataSection3" /&gt;
&lt;/category&gt;</screen></para>

    <para>Now if you regenerate the specdocs, The categories will appear at
    the top of the API page. You can then more easily find the function you
    wanted.</para>
  </sect1>

  <sect1 id="logs">
    <title>Managing logs</title>

    <para>XINS includes it's own logging system called logdoc which is based
    on log4j.</para>

    <sect2 id="server.logs">
      <title>Managing the logs on the server side.</title>

      <para>You can also manage the debugging settings of XINS by changing the
      xins.properties file. Here are the main logging settings that can be
      changed:</para>

      <table id="log4j.properties.table">
        <title>Log4j properties</title>

        <tgroup cols="3">
          <tbody>
            <row>
              <entry>Property</entry>

              <entry>Value examples</entry>

              <entry>Description</entry>
            </row>

            <row>
              <entry>log4j.rootLogger</entry>

              <entry>DEBUG, console, logfile</entry>

              <entry>Indicates the level of logging and the modules that will
              receive the output.</entry>
            </row>

            <row>
              <entry>log4j.&lt;api name&gt;.rootLogger</entry>

              <entry>INFO, logfile2</entry>

              <entry>Indicates the level of logging and the modules that will
              receive the output for the specified API.</entry>
            </row>

            <row>
              <entry>log4j.appender.console</entry>

              <entry>org.apache.log4j.ConsoleAppender</entry>

              <entry>Indicates where the output is redirected for the
              module.</entry>
            </row>

            <row>
              <entry>log4j.appender.console.layout</entry>

              <entry>org.apache.log4j.PatternLayout</entry>

              <entry>Indicates the pattern for the output header (text that
              precedes the output text).</entry>
            </row>

            <row>
              <entry>log4j.appender.console.layout.ConversionPattern</entry>

              <entry>%d %-5p %c %x - %m%n</entry>

              <entry>Indicates the format of the output header.</entry>
            </row>

            <row>
              <entry>log4j.logger.org.xins.common.expiry.3411</entry>

              <entry>ERROR</entry>

              <entry>Changes the log level for a message. This can be useful
              if you want to hide a message or if you want to show a
              message.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The log levels are <literal>DEBUG</literal> &lt;
      <literal>INFO</literal> &lt; <literal>NOTICE</literal> &lt;
      <literal>WARN</literal> &lt; <literal>ERROR</literal> &lt;
      <literal>FATAL</literal>. This means that if you set the log level to
      <literal>ERROR</literal>, only the <literal>ERROR</literal> and
      <literal>FATAL</literal> messages will be logged.</para>

      <para>For more information on the possible characters in the conversion
      pattern, visit the <ulink
      url="http://logging.apache.org/log4j/docs/api/org/apache/log4j/PatternLayout.html">log4j
      website</ulink>.</para>

      <para>The nested diagnostic context (NDC - %x) is set to the value of
      the <literal>_context</literal> parameter of the query. If no
      <literal>_context</literal> parameter is passed a default context is
      created as
      <literal>apiName@localHost:yyyyMMdd-HHmmssNNN:random</literal>
      where:</para>

      <itemizedlist>
        <listitem>
          <para>apiName is the name of the API.</para>
        </listitem>

        <listitem>
          <para>localHost is the IP address of the computer that is running
          the api.</para>
        </listitem>

        <listitem>
          <para>yyyyMMdd-HHmmssNNN is the date of the request (year - month -
          day - hour - minute - second - millisecond).</para>
        </listitem>

        <listitem>
          <para>random is a 5 digits long random hexadecimal generated
          number.</para>
        </listitem>
      </itemizedlist>

      <para>For more information on the possible logging properties and
      values, visit <ulink
      url="http://logging.apache.org/log4j/docs/manual.html">log4j
      documentation page</ulink>.</para>
    </sect2>

    <sect2 id="logdoc">
      <title>Adding your own logs.</title>

      <para>It's sometimes useful to log events that may happen in your
      function. To do so, you need to create what is called a logdoc (log
      documentation).</para>

      <para>To create a new logdoc execute <command>xins
      create-logdoc</command>.</para>

      <para>The command will ask you for the name of your api. The script will
      then create a new <filename>log.xml</filename> file in the directory
      <filename>apis\&lt;api name&gt;\impl</filename> with the
      content:<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE log PUBLIC "-//XINS//DTD XINS Logdoc 2.3//EN"
          "http://www.xins.org/dtd/log_2_3.dtd"&gt;

&lt;log&gt;

  &lt;translation-bundle locale="en_US" /&gt;

  &lt;group id="exampleid" name="Example"&gt;
    &lt;entry id="10000" level="DEBUG"&gt;
      &lt;description&gt;Example of logdoc with some parameters.&lt;/description&gt;
      &lt;param name="parameter" /&gt;
      &lt;param name="number" nullable="false" type="int32" /&gt;
    &lt;/entry&gt;
    &lt;entry id="10001" level="ERROR" exception="true"&gt;
      &lt;description&gt;Example with an exception.&lt;/description&gt;
    &lt;/entry&gt;
  &lt;/group&gt;
&lt;/log&gt;</screen></para>

      <para>The group id is used for the creation of the log key (e.g.
      <literal>com.mycompany.myproject.api.exampleid.10001</literal>) and the
      group name is used for the description of the group.</para>

      <para>It also creates a default translation file
      <filename>translation-bundle-en_US.xml</filename> with the
      content:</para>

      <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE translation-bundle PUBLIC "-//XINS//DTD XINS Translation Bundle 2.3//EN"
          "http://www.xins.org/dtd/translation-bundle_2_3.dtd"&gt;

&lt;translation-bundle&gt;
  &lt;translation entry="10000"&gt;Example of logdoc with the parameter &lt;value-of-param name="parameter" format="quoted" /&gt; and &lt;value-of-param name="number" /&gt;.&lt;/translation&gt;
  &lt;translation entry="10001"&gt;Example of an exception.&lt;/translation&gt;
&lt;/translation-bundle&gt;</screen>

      <para>You can now use the logdoc in your function implementation by
      calling the method <methodname>Log.log_10000(myParam,
      36);</methodname></para>

      <para>The command will also add the element <literal>&lt;logdoc
      /&gt;</literal> to the impl element of the <filename>impl.xml</filename>
      file. If you want to use the logs in packages other than the default one
      add the attribute <literal>accesslevel="public"</literal> to the
      <literal>logdoc</literal> element.</para>

      <para>The Logdoc consist of a main <filename>log.xml</filename> file
      which defines the possible locale for the logs of this API and the
      groups of entries. Each entry has an <literal>id</literal> that is by
      convension a number higher than 10000 as numbers between 1000 and 9999
      are reserved for XINS. Ids don't have to be consecutive numbers. It's
      even advisable to have numbers gaps between groups.</para>

      <para>If the entry has the attribute <literal>exception</literal> with
      the value <literal>true</literal>, then the exception should be the
      first parameter when invoking the method. For example the id 10001
      should be invoked with
      <methodname>Log.log_10001(myException);</methodname>.</para>

      <para>The possible types for a parameter are <literal>boolean</literal>,
      <literal>int8</literal>, <literal>int16</literal>,
      <literal>in32</literal>, <literal>int64</literal>,
      <literal>text</literal> and <literal>object</literal>.</para>

      <para>By default for a parameter the nullable attribute is set to
      <literal>true</literal> and the type attribute is set to
      <literal>text</literal>.</para>

      <para>These types match respectively in Java the types
      <literal>boolean</literal>, <literal>byte</literal>,
      <literal>short</literal>, <literal>int</literal>,
      <literal>long</literal>, <classname>String</classname> and
      <classname>Object</classname>.</para>

      <para>If you use logdoc in your API, the list and the description of the
      defined log entries will be available in the specification
      documentation.</para>

      <para>In the <filename>log.xml</filename> the warning level is set with
      <literal>level="WARNING"</literal> but the level is translated as the
      <literal>WARN</literal> log4j level.</para>

      <para>Note that when the specification documentation (specdocs) is
      generated the HTML pages describing the logging message is also
      generated. You can see the XINS logdoc at <ulink
      url="http://xins.sourceforge.net/logdoc.html">http://xins.sourceforge.net/logdoc.html</ulink>.</para>
    </sect2>

    <sect2 id="configure.logs">
      <title>Configuring the properties files for specific logs</title>

      <para>Sometimes too much log information is printed and you would like
      to remove some of the messages printed by the log.</para>

      <para>There are several ways to do this. The best ways is to hide the
      logging messages you don't want.</para>

      <para>The following example will hide the <literal>HTTPClient
      DEBUG</literal> logs:<screen>log4j.logger.org.apache.http=INFO</screen></para>

      <para>The following example will hide all XINS messages which are not at
      least at the <literal>WARN</literal> level:<screen>log4j.logger.org.xins=WARN</screen></para>

      <para>The following example will hide the specific logging message
      because the message is at <literal>DEBUG</literal> level:<screen>log4j.logger.org.xins.server.lifespan.init.3402=INFO</screen></para>

      <para>The locale can also be specified in the XINS properties
      file:<screen># Locale used for logging
org.xins.server.log.locale=en_US</screen></para>

      <para>The logdoc with the locale <literal>en_US</literal> and
      <literal>fr_FR</literal> are provided in XINS.</para>

      <para>An example of a XINS properties file with a customized logging
      system can be found in the <filename>demo</filename> directory.</para>
    </sect2>
  </sect1>

  <sect1 id="load.balancing">
    <title>Managing load balancing and fail over</title>

    <para>XINS can also manage load balancing and fail over when you want to
    invoke your function using CAPI. To do so, your function needs to be
    started on 2 computers. Our code is based on the CAPI example done in
    <xref linkend="capi.example"/>.</para>

    <para>The first possibility would be to use the
    <classname>GroupDescriptor</classname> (<ulink
    url="javadoc/org/xins/common/service/GroupDescriptor.html">javadoc</ulink>)
    instead combined with a <classname>TargetDescriptor</classname> (<ulink
    url="javadoc/org/xins/common/service/TargetDescriptor.html">javadoc</ulink>):</para>

    <programlisting>// Create the descriptor for the service
TargetDescriptor server1 = new TargetDescriptor("http://192.168.0.20:8080/my-project/", 20000);
TargetDescriptor server2 = new TargetDescriptor("http://192.168.0.21:8080/my-project/", 20000);
Descriptor[] servers = {server1, server2};

// Create the descriptor for load balancing
GroupDescriptor descriptor = new GroupDescriptor(GroupDescriptor.RANDOM_TYPE, servers);
/* If you wanted to have fail over replace the above line with
   GroupDescriptor descriptor = new GroupDescriptor(GroupDescriptor.ORDERED_TYPE, servers);*/</programlisting>

    <para>The drawback of this method is that it's not flexible, any changes
    of IP addresses, time-out or if you want to add a new server, you would
    need to adapt the code, recompile and then redeploy it.</para>

    <para>A better method would be to have the URLs and the time-out in a
    property file. The only code you need then to create your descriptor
    is</para>

    <programlisting>// Build the descriptor
Descriptor descriptor = DescriptorBuilder.build(properties, "capis.myproject");</programlisting>

    <para>where properties is the <classname>Map&lt;String,
    String&gt;</classname> object that contains your parameters.</para>

    <para>If you only have one server (for example your computer for testing),
    set the properties as</para>

    <screen>capis.myproject=service, http://127.0.0.1:8080/my-project/, 20000</screen>

    <para>If you want to have load balancing, set the properties as</para>

    <screen>capis.myproject=group, random, server1, server2
capis.myproject.server1=service, http://192.168.0.20:8080/my-project/, 20000
capis.myproject.server2=service, http://192.168.0.21:8080/my-project/, 20000</screen>

    <para>If you want to have fail over, set the properties as</para>

    <screen>capis.myproject=group, ordered, server1, server2
capis.myproject.server1=service, http://192.168.0.20:8080/my-project/, 20000
capis.myproject.server2=service, http://192.168.0.21:8080/my-project/, 20000</screen>

    <para>It's possible to combine load balancing and fail over. For example
    in the following code the invocation is balanced between server1 and
    server2 and if one of both is down back-up will be used.</para>

    <screen>capis.myproject=group, random, system1, system2
capis.myproject.system1=group, ordered, server1, back-up
capis.myproject.system2=group, ordered, server2, back-up
capis.myproject.server1=service, http://192.168.0.20:8080/my-project/, 20000
capis.myproject.server2=service, http://192.168.0.21:8080/my-project/, 20000
capis.myproject.back-up=service, http://192.168.0.22:8080/my-project/, 20000</screen>

    <para>The fail-over is not always executed when an error occur, the
    condition upon which the fail-over is executed are listed in the <ulink
    url="javadoc/org/xins/client/XINSServiceCaller.html">XINSServiceCaller
    Javadoc</ulink>.</para>
  </sect1>

  <sect1 id="types">
    <title>XINS types</title>

    <para><xref linkend="input"/> shows you an example on how to use the types
    when defining the function.</para>

    <sect2 id="predefined.types">
      <title>Predefined types.</title>

      <para>XINS has some integrated types which facilitate the use of input
      and output parameters with the implementation.<table
          id="predefined.types.table">
          <title>XINS integrated types</title>

          <tgroup cols="3">
            <tbody>
              <row>
                <entry>type</entry>

                <entry>Java representation</entry>

                <entry>Example</entry>
              </row>

              <row>
                <entry>_text</entry>

                <entry>java.lang.String</entry>

                <entry>hello world</entry>
              </row>

              <row>
                <entry>_boolean</entry>

                <entry>boolean</entry>

                <entry>true</entry>
              </row>

              <row>
                <entry>_int8</entry>

                <entry>byte</entry>

                <entry>25</entry>
              </row>

              <row>
                <entry>_int16</entry>

                <entry>short</entry>

                <entry>2004</entry>
              </row>

              <row>
                <entry>_int32</entry>

                <entry>int</entry>

                <entry>15</entry>
              </row>

              <row>
                <entry>_int64</entry>

                <entry>long</entry>

                <entry>654654132135544566</entry>
              </row>

              <row>
                <entry>_float32</entry>

                <entry>float</entry>

                <entry>25.6</entry>
              </row>

              <row>
                <entry>_float64</entry>

                <entry>double</entry>

                <entry>3.14159</entry>
              </row>

              <row>
                <entry>_date</entry>

                <entry>org.xins.common.types.standard.Date.Value</entry>

                <entry>20040514</entry>
              </row>

              <row>
                <entry>_timestamp</entry>

                <entry>org.xins.common.types.standard.Timestamp.Value</entry>

                <entry>20040514115930</entry>
              </row>

              <row>
                <entry>_property</entry>

                <entry>Map&lt;String, String&gt;</entry>

                <entry>upgrade%3Dtrue%26surname%3Dde%2BHaan</entry>
              </row>

              <row>
                <entry>_list</entry>

                <entry>org.xins.common.types.standard.List.Value</entry>

                <entry>item1%26item2%26item1</entry>
              </row>

              <row>
                <entry>_set</entry>

                <entry>org.xins.common.types.standard.Set.Value</entry>

                <entry>item3%26item1%26item2</entry>
              </row>

              <row>
                <entry>_base64</entry>

                <entry>byte[]</entry>

                <entry>aGVsbG8=</entry>
              </row>

              <row>
                <entry>_hex</entry>

                <entry>byte[]</entry>

                <entry>546573746f</entry>
              </row>

              <row>
                <entry>_url</entry>

                <entry>String</entry>

                <entry>http://www.google.com</entry>
              </row>

              <row>
                <entry>_descriptor</entry>

                <entry>org.xins.common.service.Descriptor</entry>

                <entry><para>descriptor=group, random, target1,
                target2</para><para>descriptor.target1=service,
                http://127.0.0.1:8080/my-project/,
                8000</para><para>descriptor.target2=service,
                http://192.168.0.1:8080/my-project/, 8000</para></entry>
              </row>

              <row>
                <entry>_xml</entry>

                <entry>org.xins.common.xml.Element</entry>

                <entry>&lt;firstName&gt;Alain&lt;/firstName&gt;</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para>You can find an example using all these types in the function
      <filename>demo\xins-project\apis\allinone\spec\SimpleTypes.fnc</filename>.</para>
    </sect2>

    <sect2 id="defined.types">
      <title>Defined types</title>

      <para>As seen in <xref linkend="input"/>, it's also possible to define
      your own type. Here is a list of the possible types to define in
      XINS:</para>

      <itemizedlist>
        <listitem>
          <para><literal><literal>&lt;pattern&gt;</literal></literal>: This
          type accepts a PERL5 regular expression and allows you to define a
          text that has some constraints in its format.</para>
        </listitem>

        <listitem>
          <para><literal>&lt;enum&gt;</literal>: This type must contain a list
          of <literal>&lt;item&gt;</literal> elements, each item element must
          have a <literal>value</literal> attribute that contains the value of
          the item and can have a <literal>name</literal> attribute that
          contains the description of the item. If the name is not defined
          it's set by default to the value of the item.</para>
        </listitem>

        <listitem>
          <para><literal>&lt;int8&gt;</literal>,
          <literal>&lt;int16&gt;</literal>, <literal>&lt;int32&gt;</literal>,
          <literal>&lt;int64&gt;</literal>: These types define a number. They
          accept the optional attributes <literal>min</literal> and
          <literal>max</literal> that can be used to set a minimum and a
          maximum value for the parameter.</para>
        </listitem>

        <listitem>
          <para><literal>&lt;float32&gt;</literal>,
          <literal>&lt;float64&gt;</literal>: These types define a floating
          point number. They accept the optional attributes
          <literal>min</literal> and <literal>max</literal> that can be used
          to set a minimum and a maximum value for the parameter.</para>
        </listitem>

        <listitem>
          <para><literal>&lt;properties&gt;</literal>: This type is similar to
          the <literal>_property</literal> type but it allows you to specify a
          type for the keys and the values of the property by using the
          optional attributes <literal>nameType</literal> and
          <literal>valueType</literal>. If not specified the type
          <literal>_text</literal> will be used.</para>
        </listitem>

        <listitem>
          <para><literal>&lt;list&gt;</literal> and
          <literal>&lt;set&gt;</literal>: These types are used to define a
          list of values in a parameter. The type of the value can be
          restricted by using the optional attribute <literal>type</literal>.
          If not specified the default value for the <literal>type</literal>
          attribute is <literal>_text</literal>.</para>
        </listitem>

        <listitem>
          <para>&lt;xml&gt;: This type is used to specify an XML paramter. It
          accept the attribute <parameter>xsdLocation</parameter> that can be
          a URL or a local file in the <literal>spec</literal>
          directory.</para>
        </listitem>

        <listitem>
          <para><literal>&lt;base64&gt;</literal>,
          <literal>&lt;hex&gt;</literal>: This type defines a binary. They
          accept the optional attributes <literal>min</literal> and
          <literal>max</literal> that can be used to set a minimum and a
          maximum size in bytes for the binary.</para>
        </listitem>
      </itemizedlist>

      <para>You can find an example using some of these types in the function
      <filename>demo\xins-project\apis\allinone\spec\DefinedTypes.fnc</filename>.</para>
    </sect2>

    <sect2 id="shared.types">
      <title>Shared types</title>

      <para>If you have more than one API, you may want to reuse types defined
      in other APIs (for example EMail.typ, Account.typ, LastName.typ, ...).
      Instead of copying the file to the new API, you can also point to this
      type. This is done by using <literal>&lt;api name&gt;/&lt;type
      name&gt;</literal> in api.xml and in the function(s)
      specification.</para>

      <para>For example:</para>

      <screen>  &lt;type name="petstore/EMail"/&gt;</screen>

      <screen>  &lt;param name="outputEMail" required="false" type="petstore/EMail"&gt;
    &lt;description&gt;An example of output shared type.&lt;/description&gt;
  &lt;/param&gt;</screen>
    </sect2>
  </sect1>

  <sect1 id="grouping.types">
    <title>Grouping types</title>

    <sect2 id="param.combos">
      <title>Param combos</title>

      <para>It's also possible in XINS to defined a group of
      <literal>input</literal> or <literal>output</literal> parameters. There
      are 4 kinds of group:</para>

      <itemizedlist>
        <listitem>
          <para><literal>inclusive-or</literal></para>

          <para>If a group is <literal>inclusive-or</literal> then at least
          one of the parameters defined in the <literal>param-ref</literal>
          should have a value.</para>
        </listitem>

        <listitem>
          <para><literal>exclusive-or</literal></para>

          <para>If a group is <literal>exclusive-or</literal> then one and
          only one of the parameters defined in the
          <literal>param-ref</literal> should have a value.</para>
        </listitem>

        <listitem>
          <para><literal>all-or-none</literal></para>

          <para>If a group is <literal>all-or-none</literal> then either none
          of the of the parameters defined in the <literal>param-ref</literal>
          should have a value or all.</para>
        </listitem>

        <listitem>
          <para><literal>not-all</literal></para>

          <para>If a group is <literal>not-all</literal> then at least one of
          the parameters defined in the <literal>param-ref</literal> should
          not have a value.</para>
        </listitem>
      </itemizedlist>

      <para>Example:<screen>&lt;input&gt;
  &lt;param name="birthYear" required="false" type="_int32"&gt;
    &lt;description&gt;The birth date's year.&lt;/description&gt;
  &lt;/param&gt;
  &lt;param name="birthMonth" required="false" type="_int32"&gt;
    &lt;description&gt;The birth date's month.&lt;/description&gt;
  &lt;/param&gt;
  &lt;param name="birthDay" required="false" type="_int32"&gt;
    &lt;description&gt;The birth date's day.&lt;/description&gt;
  &lt;/param&gt;
  &lt;param name="birthCountry" required="false" type="_text"&gt;
    &lt;description&gt;The country where the person is born.&lt;/description&gt;
  &lt;/param&gt;
  &lt;param name="birthCity" required="false" type="_text"&gt;
    &lt;description&gt;The city where the person is born.&lt;/description&gt;
  &lt;/param&gt;
  &lt;param name="age" required="false" type="Age"&gt;
    &lt;description&gt;An example of input for a int8 type with a minimum and maximum.&lt;/description&gt;
  &lt;/param&gt;
  &lt;!-- One of the two parameters must be filled but not both --&gt;
  &lt;param-combo type="exclusive-or"&gt;
    &lt;param-ref name="birthYear" /&gt;
    &lt;param-ref name="age"       /&gt;
  &lt;/param-combo&gt;
  &lt;!-- At least one of the two parameters must be filled --&gt;
  &lt;param-combo type="inclusive-or"&gt;
    &lt;param-ref name="birthCountry" /&gt;
    &lt;param-ref name="birthCity"    /&gt;
  &lt;/param-combo&gt;
  &lt;!-- These parameters must be filled together or not filled at all --&gt;
  &lt;param-combo type="all-or-none"&gt;
    &lt;param-ref name="birthYear"  /&gt;
    &lt;param-ref name="birthMonth" /&gt;
    &lt;param-ref name="birthDay"   /&gt;
  &lt;/param-combo&gt;
&lt;/input&gt;</screen></para>

      <para>If the condition is not met, XINS will return a result with an
      <literal>_InvalidRequest</literal> error code if the request does not
      match the input <literal>param-combo</literal> or an
      <literal>_InvalidReponse</literal> error code if the result does not
      match the output <literal>param-combo</literal>.</para>

      <para>You can find an example using the groups in the function
      <filename>demo\xins-project\apis\allinone\spec\ParamCombo.fnc</filename>.</para>
    </sect2>

    <sect2 id="attribute.combos">
      <title>Attribute combos</title>

      <para>It is also possible to defined similar constraint on attributes of
      elements defined in the data section (See next chapter). This is done
      using the <literal>attribute-combo</literal> and the
      <literal>attribute-ref</literal> elements.</para>

      <para>Example:<screen>&lt;data&gt;
  &lt;contains&gt;
    &lt;contained element="person" /&gt;
  &lt;/contains&gt;
  &lt;element name="person"&gt;
    &lt;description&gt;A person&lt;/description&gt;
    &lt;attribute name="birthCountry" required="false" type="_text"&gt;
      &lt;description&gt;The country where the person is borned.&lt;/description&gt;
    &lt;/attribute&gt;
    &lt;attribute name="birth-city" required="false" type="_text"&gt;
      &lt;description&gt;The city where the person is borned.&lt;/description&gt;
    &lt;/attribute&gt;
    &lt;attribute name="age" required="false" type="Age"&gt;
      &lt;description&gt;An example of input for a int8 type with a minimum and maximum.&lt;/description&gt;
    &lt;/attribute&gt;
    &lt;!-- At least one of the two attributes must be filled --&gt;
    &lt;attribute-combo type="inclusive-or"&gt;
      &lt;attribute-ref name="birthCountry" /&gt;
      &lt;attribute-ref name="birth-city" /&gt;
    &lt;/attribute-combo&gt;
  &lt;/element&gt;
&lt;/data&gt;</screen></para>
    </sect2>

    <sect2 id="combos.values">
      <title>Combos based on values</title>

      <para>It is also possible to define constraints based on the value of
      one parameter (and not only on whether the parameter is set or not).
      This is done by added the value attribute to the param-ref element or
      attribute-ref element for attribute-combo.</para>

      <para>Example:<screen>&lt;input&gt;
  &lt;param name="salutation" required="true" type="Salutation"&gt;
    &lt;description&gt;The gender of the person.&lt;/description&gt;
  &lt;/param&gt;
  &lt;param name="maidenName" required="false" type="_text"&gt;
    &lt;description&gt;The maiden name.&lt;/description&gt;
  &lt;/param&gt;
  &lt;!-- If the salutation is Madam, the maiden name is required --&gt;
  &lt;param-combo type="inclusive-or"&gt;
    &lt;param-ref name="salutation" value="Madam" /&gt;
    &lt;param-ref name="maidenName" /&gt;
  &lt;/param-combo&gt;
&lt;/input&gt;</screen></para>

      <para>The description of the type associated with the param-combo is
      then a bit different:</para>

      <itemizedlist>
        <listitem>
          <para><literal>inclusive-or</literal></para>

          <para>If the parameter has the defined value then the second
          parameter is required.</para>
        </listitem>

        <listitem>
          <para><literal>exclusive-or</literal></para>

          <para>If the parameter has the value then the other parameter should
          not be filled, otherwise the second parameter is required.</para>
        </listitem>

        <listitem>
          <para><literal>all-or-none</literal></para>

          <para>If the parameter has the value then the others parameters are
          required, otherwise the other parameters should not be set.</para>
        </listitem>

        <listitem>
          <para><literal>not-all</literal></para>

          <para>If the parameter has the value then the other parameters
          should not be set.</para>
        </listitem>
      </itemizedlist>

      <para>For a better understanding, look at the
      <function>ParamComboValue.fnc</function> function provided in the
      <literal>allinone</literal> API.</para>

      <para>It is also possible to have more than one
      <literal>param-ref</literal> with a value in the same
      <literal>param-combo</literal>.</para>
    </sect2>
  </sect1>

  <sect1 id="data.section">
    <title>The data section.</title>

    <para>The data section defines a tree structure in the input or output
    section.</para>

    <sect2 id="data.section.specs">
      <title>The specification</title>

      <para>Example:<screen>&lt;data&gt;
  &lt;contains&gt;
    &lt;contained element="property" /&gt;
  &lt;/contains&gt;
  &lt;element name="property"&gt;
    &lt;description&gt;A property name and value.&lt;/description&gt;
    &lt;attribute name="name" required="true" type="PropertyName"&gt;
      &lt;description&gt;The property name.&lt;/description&gt;
    &lt;/attribute&gt;
    &lt;attribute name="value" required="true" type="_text"&gt;
      &lt;description&gt;The property value.&lt;/description&gt;
    &lt;/attribute&gt;
  &lt;/element&gt;
&lt;/data&gt;</screen></para>

      <para>An element can also contain another element or text(pcdata) but
      not both.</para>

      <para>To add an element in another element, add<screen>&lt;data&gt;
  &lt;contains&gt;
    &lt;contained element="property" /&gt;
  &lt;/contains&gt;
  &lt;element name="property"&gt;
    &lt;description&gt;A property name and value.&lt;/description&gt;
    &lt;contains&gt;
      &lt;contained element="product" /&gt;
    &lt;/contains&gt;
    &lt;attribute name="name" required="true" type="PropertyName"&gt;
      &lt;description&gt;The property name.&lt;/description&gt;
    &lt;/attribute&gt;
  &lt;/element&gt;
  &lt;element name="product"&gt;
...</screen></para>

      <para>If you want your element to contain <literal>PCDATA</literal>,
      use<screen>&lt;data&gt;
  &lt;contains&gt;
    &lt;contained element="property" /&gt;
  &lt;/contains&gt;
  &lt;element name="property"&gt;
    &lt;description&gt;A property name and value.&lt;/description&gt;
    &lt;contains&gt;
      &lt;pcdata /&gt;
    &lt;/contains&gt;
    &lt;attribute name="name" required="true" type="PropertyName"&gt;
      &lt;description&gt;The property name.&lt;/description&gt;
    &lt;/attribute&gt;
...</screen></para>

      <para>Since XINS 1.1.0, it's also possible to include more than one
      element in the data section:<screen>&lt;data&gt;
  &lt;contains&gt;
    &lt;contained element="packet" /&gt;
    &lt;contained element="letter" /&gt;
  &lt;/contains&gt;
  &lt;element name="packet"&gt;
    &lt;description&gt;The packet.&lt;/description&gt;
    &lt;attribute name="destination" required="true" type="_text"&gt;
      &lt;description&gt;The destination of the packet.&lt;/description&gt;
    &lt;/attribute&gt;
  &lt;/element&gt;
  &lt;element name="letter"&gt;
    &lt;description&gt;The letter.&lt;/description&gt;
    &lt;contains&gt;
      &lt;pcdata /&gt;
    &lt;/contains&gt;
    &lt;attribute name="destination" required="true" type="_text"&gt;
      &lt;description&gt;The destination of the letter.&lt;/description&gt;
    &lt;/attribute&gt;
  &lt;/element&gt;
&lt;/data&gt;</screen></para>

      <para>Attributes can also have a default value using the
      <literal>default</literal> attribute.</para>
    </sect2>

    <sect2 id="data.section.impl">
      <title>The implementation</title>

      <para>The data section is translated into a Java object with the
      appropriate set methods. Once the object is created, you can add them to
      the <classname>SuccessfulResult</classname> using provided add
      methods.</para>

      <para>Example:<programlisting>SuccessfulResult result = new SuccessfulResult();
Property myProperty = new Property();
myProperty.setName(myName);
myProperty.setValue(myValue);
result.addProperty(myProperty);
return result;</programlisting></para>

      <para>If you had specified that your element could contain another
      element, the <classname>Property</classname> class would also have a
      <methodname>addProduct(Product)</methodname> method.</para>

      <para>If you had specified that your element could contain a text, the
      <classname>Property</classname> class would also contain a
      <methodname>pcdata(String)</methodname> method.</para>
    </sect2>

    <sect2 id="data.section.result">
      <title>The result</title>

      <para>To view what kind of result to expect from a data section, we will
      define an example in the specification of the function.</para>

      <screen>&lt;output-data-example&gt;
  &lt;element-example name="property"&gt;
    &lt;attribute-example name="name"&gt;upgrade&lt;/attribute-example&gt;
    &lt;attribute-example name="value"&gt;true&lt;/attribute-example&gt;
  &lt;/element-example&gt;
  &lt;element-example name="property"&gt;
    &lt;attribute-example name="name"&gt;surname&lt;/attribute-example&gt;
    &lt;attribute-example name="value"&gt;Doe&lt;/attribute-example&gt;
  &lt;/element-example&gt;
&lt;/output-data-example&gt;</screen>

      <para>The resulting XML from XINS would then be<screen>&lt;result&gt;
  &lt;data&gt;
    &lt;property name="upgrade" value="true" /&gt;
    &lt;property name="surname" value="Doe" /&gt;
  &lt;/data&gt;
&lt;/result&gt;</screen></para>

      <para>If your element accepted <literal>PCDATA</literal>, you can set a
      value by adding <literal>&lt;pcdata-example&gt;My
      value&lt;/pcdata-example&gt;</literal> before the
      <literal>&lt;attribute-example&gt;</literal>.</para>

      <para>You can find some examples of the output data section in the
      functions
      <filename>demo\xins-project\apis\allinone\spec\DataSection.fnc</filename>
      and
      <filename>demo\xins-project\apis\allinone\spec\DataSection2.fnc</filename>.</para>
    </sect2>

    <sect2 id="data.section.input">
      <title>Data section for the input</title>

      <para>Since XINS 1.1.0 it's also possible to send a data section for the
      request. The definition of the data section is similar to the definition
      for the output section except that it must be done in the input section.
      The definition of the example is done using the
      <literal>&lt;input-data-example&gt;</literal> element.</para>

      <para>This allows you to send complex structures with XINS in the
      request.</para>

      <para>The framework will generate some extra objects and methods to get
      the values of the input data section. Here is an
      example:<programlisting>import java.util.Iterator;
...
Iterator itAddresses = request.listAddress().iterator();
while (itAddresses.hasNext()) {
  Request.Address nextAddress = (Request.Address) itAddresses.next();
  System.out.println(nextAddress.getPostcode());
}</programlisting></para>

      <para>An example is provided with XINS in the function
      <filename>demo\xins-project\apis\allinone\spec\DataSection3.fnc</filename>.</para>

      <para>Since XINS 1.5.0, if you are using Java 1.5 and deploying on a
      Java 1.5 application server, you can also benefit from the Java generics
      feature as demontrated at the end of the next section.</para>
    </sect2>

    <sect2 id="data.section.client">
      <title>Data section on the client side</title>

      <para>On the client side the data section is retreived as an
      <classname>org.xins.common.xml.Element</classname> object (<ulink
      url="javadoc/org/xins/common/xml/Element.html">javadoc</ulink>). To get
      the values in the returned data section, use the methods provided in the
      <classname>Element</classname> class such as
      <methodname>getAttribute(String localName)</methodname> or
      <methodname>getChildElements(String name)</methodname>.</para>

      <para>If you want to send a data section as input, you will need to
      create an <classname>org.xins.common.xml.Element</classname> (<ulink
      url="javadoc/org/xins/common/xml/Element.html">javadoc</ulink>) for
      example by using the
      <classname>org.xins.common.xml.ElementBuilder</classname> (<ulink
      url="javadoc/org/xins/common/xml/ElementBuilder.html">javadoc</ulink>)
      class. Then you can pass this object to the CAPI call method or to the
      generated Request object.</para>

      <para>Since XINS 1.3.0, the methods and objects are also generated on
      the client side for the data section. They are generated the same way as
      they are on the client side. For example, if you want to send a list of
      address and receive a list of properties, this will look like
      this:</para>

      <itemizedlist>
        <listitem>
          <para>For the request:<programlisting>import com.mycompany.myapi.capi.MyFunctionRequest;
...
MyFunctionRequest request = new MyFunctionRequest();
MyFunctionRequest.Address address1 = new MyFunctionRequest.Address();
address1.setCompany("McDo");
address1.setPostcode("12345");
request.addAddress(address1);</programlisting></para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>For the result:<programlisting>import java.util.Iterator;
import com.mycompany.myapi.capi.MyFunctionResult;
...
MyFunctionResult result = capi.callMyFunction(...);
Iterator itProperties = result.listProperty().iterator();
while (itProperties.hasNext()) {
  MyFunctionResult.Property nextProperty = (MyFunctionResult.Property) itProperties.next();
  String propertyName = nextProperty.getName();
  String propertyValue = nextProperty.getValue();
  System.out.println(propertyName + ": " + propertyValue);
}</programlisting></para>

          <para>If you are using Java 1.5 or higher and did not set the
          <property>build.java.version</property> property to a lower version,
          the generated classes will use the generics feature added to the
          Java language since Java 1.5. This will simplified your code of
          using the code:<programlisting>import com.mycompany.myapi.capi.MyFunctionResult;
...
MyFunctionResult result = capi.callMyFunction(...);
for (MyFunctionResult.Property nextProperty : result.listProperty()) {
  String propertyName = nextProperty.getName();
  String propertyValue = nextProperty.getValue();
  System.out.println(propertyName + ": " + propertyValue);
}</programlisting></para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="function.accesses">
    <title>Function accesses</title>

    <para>XINS includes a way to set some permissions for the functions using
    ACLs and also a way to disable/enable a function.</para>

    <sect2 id="acl">
      <title>ACLs</title>

      <para>The ACLs are used to restrict the access of a function based on
      the IP address from where the request comes.</para>

      <para>The ACLs are defined in the <filename>xins.properties</filename>
      file with the <property>org.xins.server.acl</property> property</para>

      <para>The value is a dot comma separated list of the keywords
      <literal>allow</literal> or <literal>deny</literal>, the IP addresses
      specified as ACL allowed or denied to access the function and the name
      of the function or * used for all functions.</para>

      <para>An ACL is an IP address followed by / and the number of bits that
      should remains the same. For example <literal>192.168.0.0/24</literal>
      defines all IP addresses starting with
      <literal>192.168.0.</literal></para>

      <para>Example:<screen>org.xins.server.acl=allow 127.0.0.1 *; \
                    allow 192.168.0.0/24 MyFunction</screen></para>

      <para>Per default, if an IP address is not specified in the list then
      the access is denied. If an IP address is specified twice then the first
      rule will apply. If you specify <literal>/0</literal> after an IP
      address then all IP address will match.</para>

      <para>Example:<screen>org.xins.server.acl=allow 127.0.0.1 *; \
                    deny 192.168.0.21 _GetSettings; \
                    allow 192.168.0.21 _*; \
                    allow 192.168.2.0/24 _*; \
                    allow 0.0.0.0/0 _GetVersion; \
                    allow 192.168.0.0/24 MyFunction</screen></para>

      <para>In this example, IP addresses starting with 192.168.0. will be
      able to access <function>MyFunction</function>, the IP address
      192.168.0.21. will also be able to access the meta functions except the
      <function>_GetSettings</function> meta function. All IP addresses
      starting with 192.168.2. will be able to access the meta functions.
      Everybody will be able to access the <function>_GetVersion</function>
      meta function.</para>

      <para>Since XINS 1.1.0, the keyword <literal>file</literal> is also
      accepted with as second argument the location of the file containing the
      permissions. The specified file should be of a special format. The lines
      should start with allow, deny or file. If the line start with allow or
      deny it should be followed by the ACL and the function as shown in the
      previous example. If the line starts with file, it should be followed by
      the location of another acl premission file. Empty lines, lines
      containing only spaces and lines starting with # are ignored. The ACL
      files will be monitored for changes every
      <literal>org.xins.server.config.reload</literal> seconds and will be
      reloaded when the meta function <literal>_ReloadProperties</literal> is
      invoked.</para>

      <para>Example:<screen>org.xins.server.acl=allow 194.134.168.0/24 _*;\
                    file /usr/conf/myApp.acl</screen></para>

      <para><filename>myApp.acl</filename>:</para>

      <screen>allow 194.134.168.0/24 *
deny 194.134.32.0/24 _*
allow 194.134.32.0/24 *

# comment...
allow 212.129.129.120 GetKey</screen>

      <para>Since XINS 2.1, it is possible to allow or deny a call based on
      the calling convention used. To do it add after the name or the pattern
      of the function, the name or the regular expression pattern of the
      calling convention you want to allow or deny.</para>

      <para>For example:<screen>org.xins.server.acl=allow 194.134.168.0/24 _* _xins-std|_xins-xslt;\
                    deny 0.0.0.0/0 _*;\
                    deny 0.0.0.0/0 * _xins-soap</screen>allows the meta
      functions to be called only using the _xins-std or _xins-xslt calling
      conventions for the given IP range and denies any call using the
      _xins-soap calling convention.</para>
    </sect2>

    <sect2 id="disable.function">
      <title>Enable/Disable a function</title>

      <para>It's also possible to enable or disable a function. By default all
      functions are enabled.</para>

      <para>To disable a function, request the following URL:
      <literal>http://API_PATH?_function=_DisableFunction&amp;functionName=MyFunction</literal></para>

      <para>To re-enable the function, request the URL:
      <literal>http://API_PATH?_function=_EnableFunction&amp;functionName=MyFunction</literal></para>

      <para>The links to enable or disable a function are provided on the test
      form generated with the specification documentation.</para>
    </sect2>

    <sect2 id="https">
      <title>HTTPS</title>

      <para>It's also possible to use HTTPS as communication layer to call a
      XINS API. To do it, you just need to configure the HTTP server (such as
      Apache) or the servlet container (such as Tomcat) with the correct
      settings.</para>

      <para>For more information on setting up the server, read the following
      articles:</para>

      <itemizedlist>
        <listitem>
          <para><ulink
          url="http://www.dga.co.uk/customer/publicdo.nsf/0/2B4063F90912CC5D85256CB00007888B?OpenDocument">Configuring
          Tomcat 4.0 to use HTTPS</ulink></para>
        </listitem>

        <listitem>
          <para><ulink
          url="http://jakarta.apache.org/tomcat/tomcat-4.0-doc/ssl-howto.html">Tomcat
          4.0 SSL configuration How-To</ulink></para>
        </listitem>

        <listitem>
          <para><ulink url="http://www.jguru.com/faq/view.jsp?EID=53931">How
          can I support HTTPS (SSL) in a servlet?</ulink></para>
        </listitem>
      </itemizedlist>

      <para>Note that HTTPS is a supported protocol on the client side only
      since XINS 1.3.0.</para>
    </sect2>
  </sect1>

  <sect1 id="meta.functions">
    <title>The meta functions</title>

    <para>When you're starting a XINS server, a set of meta functions are
    already available. We just saw in the Enable/Diable section the first two
    <literal>_DisableFunction</literal> and
    <literal>_EnableFunction</literal>. Note that all meta functions start
    with an underscore.</para>

    <table id="meta.functions.table">
      <title>XINS Meta functions</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry>Name</entry>

            <entry>Description</entry>
          </row>

          <row>
            <entry>_NoOp</entry>

            <entry>No operation: This meta function does nothing but maybe
            useful to monitor if the server is up or down or the response time
            of the server.</entry>
          </row>

          <row>
            <entry>_GetVersion</entry>

            <entry>Get the running version of xml-enc, XINS, Java and of the
            API if defined.</entry>
          </row>

          <row>
            <entry>_GetSettings</entry>

            <entry>Returns the properties as set in the runtime property file
            and the Java properties as returned by
            <methodname>System.getProperties()</methodname>.</entry>
          </row>

          <row>
            <entry>_GetStatistics</entry>

            <entry>Returns the amount of memory used and for each function,
            the number of successful call, and unsuccessful call with the
            response time (min, max, last, average).<para>This function may
            have a parameter <literal>reset=true</literal> that performs a
            reset of the statistics at the same time.</para><para>This
            function may also have a parameter
            <literal>detailed=true</literal> that displays the statistics per
            error code for the unsuccessful results.</para></entry>
          </row>

          <row>
            <entry>_ResetStatistics</entry>

            <entry>Resets the statistics.</entry>
          </row>

          <row>
            <entry>_ReloadProperties</entry>

            <entry>Reloads the XINS properties file.</entry>
          </row>

          <row>
            <entry>_CheckLinks</entry>

            <entry>Checks that the API can access the other API's or URL it's
            using.<para>This meta function will test the URLs set in the
            runtime properties file where the property is defined in the
            <filename>impl.xml</filename> file with the type
            <literal>_url</literal> or
            <literal>_descriptor</literal>.</para></entry>
          </row>

          <row>
            <entry>_GetFunctionList</entry>

            <entry>Returns the list of the functions.</entry>
          </row>

          <row>
            <entry>_DisableFunction</entry>

            <entry>Disables the function passed in the functionName input
            parameter.</entry>
          </row>

          <row>
            <entry>_EnableFunction</entry>

            <entry>Enables the function passed in the functionName input
            parameter.</entry>
          </row>

          <row>
            <entry>_DisableAPI</entry>

            <entry>Disables the API by returning HTTP 503 to all
            requests.</entry>
          </row>

          <row>
            <entry>_EnableAPI</entry>

            <entry>Re-enables the API that was disabled.</entry>
          </row>

          <row>
            <entry>_WSDL</entry>

            <entry>Returns the <ulink
            url="http://www.w3.org/TR/wsdl">WSDL</ulink> of the API.</entry>
          </row>

          <row>
            <entry>_SMD</entry>

            <entry>Returns the <ulink url="http://dojo.jot.com/SMD">Simple
            Method Description</ulink> of the API.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="management">
    <title>Management</title>

    <para>As XINS APIs are standard Servlets, most of the management can be
    done by the Servlet container or the J2EE application server. Most of the
    management specific to the API is done by editing the runtime property
    file. See .</para>

    <sect2 id="jmx">
      <title>JMX</title>

      <para>JMX MBeans have been added since XINS 1.5.0 to have the
      possibility to manager the API using standard management tools sush as
      HP Openview or the JConsole included in the JDK.</para>

      <para>The following information are available through the JMX
      interface:</para>

      <itemizedlist>
        <listitem>
          <para>Statistics</para>
        </listitem>

        <listitem>
          <para>Bootstrap properties</para>
        </listitem>

        <listitem>
          <para>Runtime properties</para>
        </listitem>

        <listitem>
          <para>XINS version running</para>
        </listitem>

        <listitem>
          <para>API version</para>
        </listitem>

        <listitem>
          <para>Startup time</para>
        </listitem>

        <listitem>
          <para>The list of the functions</para>
        </listitem>
      </itemizedlist>

      <para>You can also perform the following actions:</para>

      <itemizedlist>
        <listitem>
          <para>noOp(): Function that does nothing but can be used to check if
          the API is up.</para>
        </listitem>

        <listitem>
          <para>reloadProperties(): Reload the runtime properties.</para>
        </listitem>
      </itemizedlist>

      <para>Log4J <classname>HierarchyDynamicMBean</classname> is also
      registered as MBean.</para>

      <para>The object names used for both MBeans starts with
      <literal>org.xins.server.&lt;api name&gt;</literal>.</para>

      <para>By default, JMX is disabled. To enable it set the runtime property
      <property>org.xins.server.jmx=true</property>.</para>

      <para>To have an overview execute <command>xins run-myproject</command>
      with Java 1.5 or later and run the <filename>jconsole.exe</filename>
      located in <filename>jdk\bin</filename>.</para>
    </sect2>

    <sect2 id="versioning">
      <title>Versioning</title>

      <para>You can also set a version to your API.</para>

      <para>To set the API version create a
      <filename>.version.properties</filename> file in the project directory
      with the 2 following properties defined:
      <literal>version.major</literal> and
      <literal>version.minor</literal>.</para>

      <para>The version will be apply to all APIs. If you want a specific
      version for one of the API, create a
      <filename>.version.properties</filename> in the <filename>apis\&lt;api
      name&gt;</filename> directory.</para>
    </sect2>
  </sect1>

  <sect1 id="shared.instance">
    <title>Shared instance</title>

    <para>In XINS the functions are initialised when you start the server, the
    initialisation also passes the properties defined in
    <filename>xins.properties</filename> to the function. XINS has the notion
    of shared instance which is an object created and initialized in a similar
    way as functions are. Furthermore this object is passed as an instance to
    all the defined functions of the API.</para>

    <para>You can think about the following situations:</para>

    <itemizedlist>
      <listitem>
        <para>You want to access a database or an access to LDAP with the
        access properties set in <filename>xins.properties</filename>.</para>
      </listitem>

      <listitem>
        <para>You want to share data between functions.</para>
      </listitem>
    </itemizedlist>

    <para>To add a shared instance to the API add in the
    <filename>impl.xml</filename> file <literal>&lt;instance
    name="_sharedObject" getter="getSharedObject" class="SharedObject"
    /&gt;</literal>.</para>

    <para>Now you need to create a class <classname>SharedObject</classname>
    in the implementation package that extends the
    <classname>org.xins.common.manageable.Manageable</classname> class (<ulink
    url="javadoc/org/xins/common/manageable/Manageable.html">javadoc</ulink>).</para>

    <para>Now you could use this object by calling in the call(Request
    request) method<programlisting>// Get some data from the shared object
String firstName = _sharedObject.getFirstName(request.getLastName());</programlisting></para>

    <para>An example is provided in the <literal>allinone</literal>
    project.</para>
  </sect1>

  <sect1 id="calling.convention">
    <title>Calling Convention</title>

    <para>Since version 1.0.1, XINS has the notion of calling
    convention.</para>

    <para>A calling convention specified the format of the request and the
    format of the result. You can see it as a communication protocol.</para>

    <para>XINS 1.1.0 includes the following calling conventions:
    <literal>_xins-std</literal>, <literal>_xins-old</literal> and
    <literal>_xins-xml</literal>.</para>

    <para>XINS 1.2.0 includes the <literal>_xins-xslt</literal> calling
    convention and allows to define it's own custom calling convention.</para>

    <para>XINS 1.3.0 includes the <literal>_xins-soap</literal> and
    <literal>_xins-xmlrpc</literal> calling conventions.</para>

    <para>XINS 1.4.0 includes the automatic detection of the calling
    convention meaning that if no _convention parameter is sent and no custom
    calling convention is defined, XINS will try to detect the calling
    convention to call based on the format of the request.</para>

    <para>XINS 1.5.0 includes the XINS front-end calling convention: xinsff. A
    <ulink url="frontend/index.html">front-end framework user guide</ulink> is
    also included in the release. It is also possible since this version
    possible to define the supported HTTP methods for a custom calling
    convention. This can be useful if you want to define a <ulink
    url="http://en.wikipedia.org/wiki/REST">REST</ulink> calling convention. A
    new example was also added that uses a
    <classname>MultipartCallingConvention</classname> to receive binaries
    files.</para>

    <para>XINS 2.0 includes the <literal>_xins-json</literal> and
    <literal>_xins-jsonrpc</literal> calling conventions. The
    <literal>_xins-old</literal> calling convention has been removed in this
    release.</para>

    <para>XINS 2.1 includes the <literal>_xins-soap-map</literal> calling
    convention.</para>

    <sect2 id="define.cc">
      <title>How to define the calling convention</title>

      <para>If nothing is specified the standard calling convention (as in
      XINS 1.0.0) is used.</para>

      <para>If the calling convention can be set, by adding the
      <literal>_convention</literal> parameter to the URL with the value of
      the calling convention as argument.</para>

      <para>The default calling convention for an API can be specified in the
      <filename>impl.xml</filename> file by adding the
      <literal>calling-convention</literal> element. For example:<screen>&lt;impl&gt;
  &lt;calling-convention name="_xins-xml" /&gt;
&lt;/impl&gt;</screen></para>
    </sect2>

    <sect2 id="standard.cc">
      <title>Standard calling convention</title>

      <para>The standard calling convention or also named POX-RPC calling
      convention is the default calling convention used by xins. If no
      calling-convention is included in the <filename>impl.xml</filename> file
      and no <parameter>_convention</parameter> parameter is passed in the
      request, XINS will expect an request using this convention and return a
      result using this convention. The property value for the POX-RPC calling
      convention is <literal>_xins-std</literal>. This calling convention is
      also known as the standard calling convention.</para>

      <para>This examples provided in this document are using the POX-RPC
      calling convention. The examples generated with the specdocs and the
      test forms are also using this calling convention.</para>

      <para>A document (<ulink url="protocol/index.html">link</ulink>) is also
      provided in the <filename>docs\protocol</filename> directory that
      contains the specifications of this calling convention.</para>
    </sect2>

    <sect2 id="xslt.cc">
      <title>XSLT calling convention</title>

      <para>The property value for the XSLT calling convention is
      <literal>_xins-xslt</literal>. The request is similar to the standard
      calling convention (using URL). The result returned is the result of the
      processing of the XML normally returned with the standard calling
      convention with a specified XSLT file. This means that the result could
      be a HTML page or XML or plain text or binary depending on the XSLT
      transformation.</para>

      <para>The location of the XSLT stylesheets is set using the runtime
      property <varname>templates.&lt;api name&gt;.xins-xslt.source</varname>.
      This property refers to the directory where the XSLT stylesheets can be
      found. The stylesheets then must have the name of the function with the
      <filename>.xslt</filename> extension.</para>

      <para>You can also pass the location of the template in the request with
      the <parameter>_template</parameter> parameter. This will override the
      previous runtime property. The location should be relative to the path
      or URL specified in the runtime property <varname>templates.&lt;api
      name&gt;.xins-xslt.parameter.prefix</varname>. If this property is not
      set the <parameter>_template</parameter> parameter is not
      allowed.</para>

      <para>The XSLT calling convention caches the templates for better
      performances. You can clear the cache by passing the
      <parameter>_cleartemplatecache=true</parameter> parameter. You can also
      disable the cache by setting the <varname>templates.cache</varname>
      runtime property to <literal>false</literal>.</para>
    </sect2>

    <sect2 id="soap.cc">
      <title>SOAP calling convention</title>

      <para>The property value for he SOAP calling convention is
      <literal>_xins-soap</literal>. The SOAP calling convention allows you to
      call the API using SOAP. SOAP is a <ulink
      url="http://www.w3.org/TR/soap/">W3C</ulink> standard communication
      protocol for Web Services. The SOAP calling convention allows to provide
      to external software and companies a way to communicate using a standard
      protocol. The SOAP calling convention allows also to use XINS with
      <ulink
      url="http://www.oasis-open.org/committees/wsbpel/charter.php">WS-BPEL</ulink>
      or <ulink url="http://java.sun.com/integration/">JBI</ulink>.</para>

      <para>Example of an input request:<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns0="urn:allinone"&gt;
  &lt;soap:Body&gt;
    &lt;ns0:DataSection3Request&gt;
      &lt;inputText&gt;Hello&lt;/inputText&gt;
      &lt;data&gt;
        &lt;address company="McDo" postcode="1234" /&gt;
        &lt;address company="Drill" postcode="4567" /&gt;
      &lt;/data&gt;
    &lt;/ns0:DataSection3Request&gt;
  &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</screen></para>

      <para>SOAP is often associated with a WSDL file that describes the Web
      Service. XINS can generate this WSDL file by executing <command>xins
      wsdl-&lt;api name&gt;</command>. This generated file is located in the
      directory <filename>build\webapps\&lt;api&gt;</filename>. Note that the
      generated WSDL file also contain the XML Schema for the standard types,
      the defined types, the required fields or the optional fields. By
      default the endpoint defined in the WSDL is the first environment
      defined in the environment XML file or if there is no file defined
      <literal>http://localhost/&lt;api
      name&gt;/?_convention=_xins-soap</literal>. You can set the endpoint by
      passing the command line argument <literal>-Dwsdl.enpoint</literal> or
      by setting the <property>wsdl.endpoint</property> property in
      <filename>build.properties</filename> file. You can then use this
      generated file in the Web Services client sush as C#, Visual Basic, PHP,
      Perl.</para>

      <para>The SOAP calling convention and the generation of the WSDL have
      been developed based the <ulink
      url="http://www.ws-i.org/Profiles/BasicProfile-1.1-2004-08-24.html">WS-I
      Basic Profile Version 1.1 </ulink>to ensure better compatibility with
      other frameworks.</para>
    </sect2>

    <sect2 id="xml.cc">
      <title>XML calling convention</title>

      <para>The property value for the XML calling convention is
      <literal>_xins-xml</literal>. In this case only HTTP POST are accepted.
      The returned output is the same as the standard calling convention.
      Example of an input request:<screen>&lt;request function="functionName"&gt;
  &lt;param name="paramName"&gt;paramValue&lt;/param&gt;
  &lt;data&gt;
    &lt;product name="something1" price="12.2" /&gt;
    &lt;product name="something2" price="23.5" /&gt;
  &lt;/data&gt;
&lt;/request&gt;</screen></para>
    </sect2>

    <sect2 id="xmlrpc.cc">
      <title>XML-RPC calling convention</title>

      <para>The property value for the XML-RPC calling convention is
      <literal>_xins-xmlrpc</literal>. XML-RPC is a specification used to
      remote procedure call using XML over HTTP. XML-RPC has client frameworks
      in a lot of languages including AppleScript, J2ME, Ruby.</para>

      <para>Example of an input request:<screen>&lt;?xml version="1.0"?&gt;
&lt;methodCall&gt;
  &lt;methodName&gt;SimpleTypes&lt;/methodName&gt;
  &lt;params&gt;
    &lt;param&gt;&lt;value&gt;&lt;struct&gt;&lt;member&gt;
    &lt;name&gt;inputBoolean&lt;/name&gt;
    &lt;value&gt;&lt;boolean&gt;0&lt;/boolean&gt;&lt;/value&gt;
    &lt;/member&gt;&lt;/struct&gt;&lt;/value&gt;&lt;/param&gt;
  &lt;/params&gt;
&lt;/methodCall&gt;</screen></para>

      <para>For more information on XML-RPC, visit the web site at <ulink
      url="http://www.xmlrpc.com/">http://www.xmlrpc.com/</ulink>.</para>
    </sect2>

    <sect2 id="jsonrpc.cc">
      <title>JSON-RPC calling convention</title>

      <para>The property value for the JSON-RPC calling convention is
      <literal>_xins-jsonrpc</literal>. JSON-RPC is a specification used to
      remote procedure call in different Ajax frameworks such as the DOJO
      toolkit. The specification of JSON-RPC are located at <ulink
      url="http://json-rpc.org/wiki/specification">http://json-rpc.org/wiki/specification</ulink>.
      Both specification version (1.0 and 1.1) are supported by the JSON-RPC
      calling convention.</para>

      <para>Example of an input request for JSON-RPC 1.0:<screen>{"method": "ResultCode", "params": ["Hallo"], "id": null}</screen></para>

      <para>Examples of ouput result for JSON-RPC 1.0:<screen>{"result": {"outputTest": "Hallo"}, "error": null, "id": null}</screen><screen>{"result": null, "error": "AlreadySet", "id": null}</screen></para>

      <para>Example of an input request for JSON-RPC 1.1:<screen>{"version": "1.1", "method": "ResultCode", "params": {"inputText": "Hallo"}}</screen><screen>http://www.myserver.com/path/ResultCode?inputText=Hallo</screen></para>

      <para>Examples of ouput result for JSON-RPC 1.1:<screen>{"version": "1.1", "result": {"outputTest": "Hallo"}}</screen><screen>{"version": "1.1", "error": {"name": "AlreadySet", "code": 123, "message": "The parameter has already been given."}}</screen></para>

      <para>For more examples, visit the web site at <ulink
      url="http://json-rpc.org/">http://json-rpc.org/</ulink>.</para>

      <para>The automatic detection of the matching calling convention for a
      request will only find request using the 1.1 specifications.</para>

      <para>XINS also support JSON-RPC 2.0. The property value for the
      JSON-RPC calling convention is <literal>_xins-jsonrpc2</literal>. The
      specification of JSON-RPC 2.0 are located at <ulink
      url="http://www.jsonrpc.org/specification">http://www.jsonrpc.org/specification</ulink>.</para>

      <para>Example of an input request for JSON-RPC 2.0:<screen>{"jsonrpc": "2.0", "method": "Echo", "params": { "in": "test 123" }, "id": 4 }</screen></para>

      <para>Examples of ouput result for JSON-RPC 2.0:<screen>{"jsonrpc":"2.0", "result":{"out":"test 123"}, "id":4}</screen><screen>{"jsonrpc":"2.0", "error":{"code":-32000, "message":"The parameter has already been given.", "data":{"count":"1"}}, "id":4}</screen></para>
    </sect2>

    <sect2 id="json.cc">
      <title>JSON calling convention</title>

      <para>The property value for the JSON calling convention is
      <literal>_xins-json</literal>. This calling convention is based on the
      Yahoo! JSON protocol specified at <ulink
      url="http://developer.yahoo.com/common/json.html">http://developer.yahoo.com/common/json.html</ulink>.
      This includes the support for the callback parameter.</para>

      <para>Example of an input request:<screen>http://www.myserver.com/path/ResultCode?inputText=Hallo&amp;output=json</screen></para>

      <para>Examples of ouput result:<screen>{"outputTest": "Hallo"}</screen></para>

      <para>Example of an input request with callback:<screen>http://www.myserver.com/path/ResultCode?inputText=Hallo&amp;output=json&amp;callback=process</screen></para>

      <para>Examples of ouput result with callback:<screen>process({"outputTest": "Hallo"})</screen></para>

      <para>This calling convention could be useful if you want to call the
      API from <ulink url="http://code.google.com/webtoolkit/">GWT</ulink>
      (Google Web Toolkit).</para>
    </sect2>

    <sect2 id="soapmap.cc">
      <title>SOAP-MAP calling convention</title>

      <para>The property value for the SOAP-Map calling convention is
      <literal>_xins-soap-map</literal>. This calling convention accepts SOAP
      requests and applies the same mapping for the request or the response as
      what is done in the <command>xins wsdl-to-api</command> command.</para>

      <para>This means that if you need to write a web service using a
      pre-defined WSDL, you can do it by executing <literal>xins
      wsdl-to-api</literal> command and pass
      <parameter>_convention=_xins-soap-map</parameter> in the URL query
      parameters.</para>

      <para>The calling convention will copy the Envelop and Body XML elements
      as what received in the request, try to keep the same namespaces prefix
      and map data element attributes to sub-elements. If after the
      transformation not all parameters are detected and mapped correctly, you
      can also extend the org.xins.server.SOAPMapCallingConvention and
      implement you own parsing on specific parts or create your specific
      response.</para>
    </sect2>

    <sect2 id="custom.cc">
      <title>Custom calling convention</title>

      <para>To create your own calling convention, you need to extend the
      <classname>org.xins.server.CustomCallingConvention</classname> class
      (<ulink
      url="javadoc/org/xins/server/CustomCallingConvention.html">javadoc</ulink>).</para>

      <para>This class has two abstract methods,
      <methodname>convertRequestImpl</methodname> and
      <methodname>convertResultImpl</methodname>, that you must
      implement.</para>

      <para>Note that the <classname>CustomCallingConvention</classname>
      extends the <classname>Manageable</classname> class, this means that you
      can read the bootstrap settings in the
      <methodname>bootstrapImpl</methodname> method and the runtime properties
      in the <methodname>initImpl</methodname> method.</para>

      <para>To define the calling convention in the
      <filename>impl.xml</filename>, you need to add an extra argument
      <literal>class</literal> to the <literal>calling-convention</literal>
      element. For example:</para>

      <screen>&lt;impl&gt;
  &lt;calling-convention name="my-convention" class="com.mycompany.myproject.MyConvention" /&gt;
&lt;/impl&gt;</screen>

      <para>You can also define more than one calling convention, in this case
      one calling convention must have the attribute
      <literal>default="true"</literal>.</para>

      <para>Example:<screen>&lt;impl&gt;
  &lt;calling-convention name="_xins-std" default="true" /&gt;
  &lt;calling-convention name="my-convention" class="com.mycompany.myproject.MyConvention" /&gt;
&lt;/impl&gt;</screen></para>

      <para>More information on how to create your own calling convention is
      provided in the <ulink
      url="http://xins.sourceforge.net/ccprimer.html">calling convention
      primer</ulink>.</para>

      <para>You can also look at the <literal>fileupload</literal> API
      provided in the examples that defines a
      <classname>CustomCallingConvention</classname> in order to upload
      binaries files.</para>
    </sect2>

    <sect2 id="examples.cc">
      <title>Examples calling convention</title>

      <para>Several custom calling conventions are provided in the examples.
      Some of them are not included in the core libraries so if you want to
      use them, you will need to copy the file to your project.</para>

      <para>Here is a list of the custom calling convention used in the
      examples:</para>

      <itemizedlist>
        <listitem>
          <para><classname>MultipartCallingConvention</classname> is defined
          in the <literal>fileupload</literal> API. This calling convention
          allows to receive files according to the HTTP file upload protocol.
          This calling convention requires the
          <filename>commons-fileupload.jar</filename> included in
          <filename>apis\fileupload\lib</filename> directory.</para>
        </listitem>

        <listitem>
          <para><classname>RESTCallingConvention</classname> is defined in the
          <literal>rest</literal> API. This calling convention only accepts
          strict <ulink
          url="http://en.wikipedia.org/wiki/Representational_State_Transfer">REST</ulink>
          requests.</para>
        </listitem>

        <listitem>
          <para>The <literal>petstore</literal> example uses the
          <classname>FrontendCallingConvention</classname> which is a custom
          calling convention added to the core. More information about this
          calling convention can be found in the <ulink
          url="frontend/index.html">XINS Front-end Framework
          manual</ulink>.</para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="utility.classes">
    <title>Utility classes</title>

    <para>XINS also contains in the org.xins.common package, a set of classes
    that could be useful for the implementation of your API.</para>

    <para>Note also that the following APIs are distributed with all XINS
    applications: <ulink
    url="http://hc.apache.org/httpcomponents-core-ga/index.html">HTTPCore</ulink>,
    <ulink
    url="http://hc.apache.org/httpcomponents-client-ga/index.html">HTTPClient</ulink>,
    <ulink url="http://jakarta.apache.org/commons/logging/">commons
    logging</ulink>, <ulink
    url="http://jakarta.apache.org/commons/codec/">commons codec</ulink>,
    <ulink url="http://logging.apache.org/log4j/docs/index.html">Log4j
    API</ulink>, <ulink
    url="http://www.json.org/java/index.html">json</ulink>, <ulink
    url="https://github.com/znerd/logdoc">logdoc</ulink>, and <ulink
    url="http://xmlenc.sourceforge.net/">xmlenc</ulink>. You can then use
    these APIs without adding any <literal>dependency</literal> element in the
    <filename>impl.xml</filename> file.</para>

    <itemizedlist>
      <listitem>
        <para>Spec package</para>

        <para>The spec package is located in org.xins.common.spec (<ulink
        url="javadoc/org/xins/common/spec/index.html">javadoc</ulink>). This
        package contains classes that provide information on the specification
        of the API. You can get the specification from the client side by
        using <methodname>capi.getAPISpecification()</methodname> and from the
        server side using <methodname>api.getAPISpecification()</methodname>.
        The method will return a <classname>APISpec</classname> object from
        which you will be able to get all the specification of the API. You
        can get information sush as the list of the functions, the type of a
        parameter in a function, the error code returned by a function.</para>
      </listitem>

      <listitem>
        <para>HTTPServiceCaller</para>

        <para>The org.xins.common.http.HTTPServiceCaller (<ulink
        url="javadoc/org/xins/common/http/HTTPServiceCaller.html">javadoc</ulink>)
        is a class that is used to get information from a URL. This class also
        supports load-balancing and fail-over via the GroupDescriptor such as
        the XINSServiceCaller does. This class has a call method that requires
        a HTTPCallRequest as input where you can specify the method to call
        the URL, the parameters of the URL and the behaviour for the
        fail-over, and this call returns a HTTPCallResult where you can get
        the returned text as String, byte[] or as InputStream as well as the
        HTTP code returned.</para>
      </listitem>

      <listitem>
        <para>ExpiryFolder</para>

        <para>The org.xins.common.collections.expiry.ExpiryFolder (<ulink
        url="javadoc/org/xins/common/collections/expiry/ExpiryFolder.html">javadoc</ulink>)
        class allows you to store some properties (key &amp; value pairs) for
        a limited amount of time. When a property is added, it has the maximum
        time to live. If the property is not requested during this time then
        the property is removed. If the property is requested using the get()
        method then time to live of this property is set again to the
        maximum.</para>

        <para>The ExpiryFolder is particularly interesting if you want to
        implement caching of the result. More for look at the <ulink
        url="http://xins.sf.net/resultcaching.html">online article</ulink>
        explaining how to do result caching for a method.</para>
      </listitem>

      <listitem>
        <para>BeanUtils</para>

        <para>The org.xins.common.BeanUtils (<ulink
        url="javadoc/org/xins/common/BeanUtils.html">javadoc</ulink>) class
        allows to copy the properties of a POJO to another POJO. It can useful
        to fill a generated Request object on the client side or a
        SuccesfulResult object on the server side. Especially if you use
        libraries such as JPA (Java Persistence API) or the Spring Framework.
        It is also useful when you want to forward a request or when the
        result of a function call should be used as input to call another
        function.</para>

        <para>If the names of the properties are different, you can also
        provide a mapping of the properties name as parameter, element name or
        attribute name. The method will also convert the types whenever
        possible.</para>
      </listitem>

      <listitem>
        <para>FileWatcher</para>

        <para>The org.xins.common.io.FileWatcher (<ulink
        url="javadoc/org/xins/common/io/FileWatcher.html">javadoc</ulink>)
        class allows you to monitor a file for changes. You just need to
        specify the file to monitor, the interval between two checks of the
        file and the listener that will be notified when the file has changed.
        Don't forget to invoke the start() method to start the monitoring of
        the file.</para>
      </listitem>

      <listitem>
        <para>ElementList</para>

        <para>The org.xins.common.xml.ElementList (<ulink
        url="javadoc/org/xins/common/xml/ElementList.html">javadoc</ulink>)
        class allows you to list and get sub DOM elements of a DOM element. As
        described in the Javadoc, this class has several advantages over
        NodeList.</para>
      </listitem>

      <listitem>
        <para>Optimized classes</para>

        <para>The org.xins.common.text (<ulink
        url="javadoc/org/xins/common/text/URLEncoding.html">javadoc</ulink>)
        package contains classes for URL encoding, URL decoding or creation of
        regular expression patterns.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="ant.tasks">
    <title>Ant tasks</title>

    <para>Before using the tasks, you need to define them using the following
    lines:<screen>  &lt;property environment="env" /&gt;
  &lt;taskdef resource="org/xins/common/ant/antlib.xml" classpath="${env.XINS_HOME}/build/xins-common.jar:${env.XINS_HOME}/lib/xmlenc.jar" /&gt;</screen></para>

    <sect2 id="callxins.task">
      <title>callxins task</title>

      <para>The <literal>callxins</literal> task is used to call a xins API.
      The result of the call is then stored in properties.</para>

      <para>Example:<screen>&lt;callxins function="MyFunction"
          apiLocation="http://localhost:8080/myproject/"
          prefix="myapi"&gt;
  &lt;param name="gender" value="m" /&gt;
  &lt;param name="personLastName" value="Lee" /&gt;
&lt;/callxins&gt;</screen></para>

      <para>This task will call the <function>MyFunction</function> function
      of the <literal>myproject</literal> API. The result will be store in the
      <property>myapi.message</property> Ant property as
      <function>MyFunction</function> just returns one output parameter named
      <parameter>message</parameter>.</para>

      <para>The <literal>prefix</literal> attribute is optional.</para>

      <para>If the function returns a data section, the properties will be set
      as described in the Ant <ulink
      url="http://ant.apache.org/manual/CoreTasks/xmlproperty.html">XML
      property task</ulink>.</para>
    </sect2>

    <sect2 id="xins.task">
      <title>xins task</title>

      <para>The xins task is used to execute a xins target. If the
      specifications have changed this target will take care of recreating the
      build.xml and calling the requested target.</para>

      <para>If you execute the script from another directory, you will need to
      define the <literal>projectdir</literal> optional attribute.</para>

      <para>Example:<screen>&lt;xins api="myproject" target="specdocs" /&gt;</screen></para>

      <para>Note that the api attribute is optional:<screen>&lt;xins target="create-api" /&gt;</screen></para>
    </sect2>
  </sect1>

  <sect1 id="targets">
    <title>XINS targets</title>

    <para>Here is a description of the most useful targets.</para>

    <table id="targets.table">
      <title>XINS targets</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry>Target name</entry>

            <entry>Description</entry>
          </row>

          <row>
            <entry>run-&lt;api&gt;</entry>

            <entry>Runs the WAR for the API.</entry>
          </row>

          <row>
            <entry>war-&lt;api&gt;</entry>

            <entry>Creates the WAR for the API.</entry>
          </row>

          <row>
            <entry>specdocs-&lt;api&gt;</entry>

            <entry>Generates all specification documentation for the
            API.</entry>
          </row>

          <row>
            <entry>javadoc-api-&lt;api&gt;</entry>

            <entry>Generates Javadoc API documentation for the API.</entry>
          </row>

          <row>
            <entry>server-&lt;api&gt;</entry>

            <entry>Generates the war file, the Javadoc API documentation for
            the server side and the specdocs for the API.</entry>
          </row>

          <row>
            <entry>jar-&lt;api&gt;</entry>

            <entry>Generates and compiles the Java classes for the client-side
            API.</entry>
          </row>

          <row>
            <entry>javadoc-capi-&lt;api&gt;</entry>

            <entry>Generates Javadoc API docs for the client-side API.</entry>
          </row>

          <row>
            <entry>client-&lt;api&gt;</entry>

            <entry>Generates the specdocs, the Javadoc API docs for the client
            side, the CAPI jar file and a Zip file containing all of
            this.</entry>
          </row>

          <row>
            <entry>clean-&lt;api&gt;</entry>

            <entry>Cleans everything for the API.</entry>
          </row>

          <row>
            <entry>rebuild-&lt;api&gt;</entry>

            <entry>Regenerates everything for the API.</entry>
          </row>

          <row>
            <entry>all-&lt;api&gt;</entry>

            <entry>Generates everything for the API.</entry>
          </row>

          <row>
            <entry>wsdl-&lt;api&gt;</entry>

            <entry>Generates the WSDL of the API.</entry>
          </row>

          <row>
            <entry>stub-&lt;api&gt;</entry>

            <entry>Generates the API stub.</entry>
          </row>

          <row>
            <entry>test-&lt;api&gt;</entry>

            <entry>Generates the unit tests if needed and tests the
            API.</entry>
          </row>

          <row>
            <entry>javadoc-test-&lt;api&gt;</entry>

            <entry>Generates Javadoc for the unit test of the API.</entry>
          </row>

          <row>
            <entry>opendoc-&lt;api&gt;</entry>

            <entry>Generates the specification of the API in open document
            format.</entry>
          </row>

          <row>
            <entry>all</entry>

            <entry>Generates everything.</entry>
          </row>

          <row>
            <entry>clean</entry>

            <entry>Removes all generated files.</entry>
          </row>

          <row>
            <entry>specdocs</entry>

            <entry>Generates all specification docs.</entry>
          </row>

          <row>
            <entry>clients</entry>

            <entry>Generates client-&lt;api&gt; for all APIs.</entry>
          </row>

          <row>
            <entry>javadoc-capis</entry>

            <entry>Generates the Javadoc for all CAPIs.</entry>
          </row>

          <row>
            <entry>javadoc-apis</entry>

            <entry>Generates the Javadoc for all APIs.</entry>
          </row>

          <row>
            <entry>wars</entry>

            <entry>Creates the WARs for all APIs.</entry>
          </row>

          <row>
            <entry>tests</entry>

            <entry>Runs the unit tests of the APIs that have tests.</entry>
          </row>

          <row>
            <entry>create-api</entry>

            <entry>Generates a new api specification file.</entry>
          </row>

          <row>
            <entry>create-function</entry>

            <entry>Generates a new function specification file.</entry>
          </row>

          <row>
            <entry>create-rcd</entry>

            <entry>Generates a new error code specification file.</entry>
          </row>

          <row>
            <entry>create-type</entry>

            <entry>Generates a new type specification file.</entry>
          </row>

          <row>
            <entry>create-example</entry>

            <entry>Generates a new example for a function.</entry>
          </row>

          <row>
            <entry>create-logdoc</entry>

            <entry>Generates the basic logdoc files for an API.</entry>
          </row>

          <row>
            <entry>version or -version</entry>

            <entry>Prints the version of XINS.</entry>
          </row>

          <row>
            <entry>help</entry>

            <entry>Prints the possible targets along with the possibles
            APIs.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="tools">
    <title>XINS tools</title>

    <para>XINS can also execute several tools that can improve the quality of
    your API.</para>

    <para>To use it, execute <command>xins &lt;tool
    target&gt;</command>.</para>

    <para>The target will ask you upon which API you want to execute the tool.
    You can also pass the name of the API as a parameter name using
    <parameter>-Dapi.name=&lt;api name&gt;</parameter> or add an
    <property>api.name</property> property to the
    <filename>build.properties</filename> file.</para>

    <para>You need to have the required libraries in the
    <filename>XINS_HOME\lib</filename> directory, unless specified
    otherwise.</para>

    <itemizedlist>
      <listitem>
        <para><command>xins help-tools</command></para>

        <para>Description: Prints the list of the tool targets with its
        description and its required or optional build properties.</para>
      </listitem>

      <listitem>
        <para><command>xins download-tools</command></para>

        <para>Description: Downloads and installs the required libraries
        needed to execute the tools.</para>
      </listitem>

      <listitem>
        <para><command>xins java2html</command></para>

        <para>Description: Generates HTML pages which contain the source code
        of the API.</para>

        <para>Required library: <ulink
        url="http://www.ibiblio.org/maven2/java2html/j2h/1.3.1/j2h-1.3.1.jar">j2h.jar</ulink></para>

        <para>Web site: <ulink
        url="http://www.java2html.de/">http://www.java2html.de/</ulink></para>

        <para>Result location: <filename>build\j2h\&lt;api
        name&gt;\index.html</filename></para>
      </listitem>

      <listitem>
        <para><command>xins pmd</command></para>

        <para>Description: Analyses the source code of the API. The default
        rules set is
        <literal>rulesset/basic.xml,rulesset/unusedcode.xml</literal>. You can
        override it by settting the <property>pmd.rules</property>
        property.</para>

        <para>Required library: <ulink
        url="http://www.ibiblio.org/maven2/pmd/pmd/3.7/pmd-3.7.jar">pmd.jar</ulink>
        and <ulink
        url="http://www.ibiblio.org/maven2/jaxen/jaxen/1.1-beta-11/jaxen-1.1-beta-11.jar">jaxen</ulink></para>

        <para>Web site: <ulink
        url="http://pmd.sourceforge.net/">http://pmd.sourceforge.net/</ulink></para>

        <para>Result location: <filename>build\pmd\&lt;api
        name&gt;\index.html</filename></para>
      </listitem>

      <listitem>
        <para><command>xins checkstyle</command></para>

        <para>Description: Checks the source code for compliance to the <ulink
        url="http://xins.sourceforge.net/XINS%20Java%20Coding%20Conventions%20-%20v1.0%20-%20July%202006.pdf">Java
        coding convention</ulink>. It also perform some analisys of the
        code.</para>

        <para>Required library: <ulink
        url="http://www.ibiblio.org/maven/checkstyle/jars/checkstyle-4.1.jar">checkstyle.jar</ulink>
        <ulink
        url="http://www.ibiblio.org/maven/commons-beanutils/jars/commons-beanutils-1.7.0.jar">commons-beanutils.jar</ulink>
        <ulink
        url="http://www.ibiblio.org/maven/antlr/jars/antlr-2.7.6.jar">antlr.jar</ulink></para>

        <para>Web site: <ulink
        url="http://checkstyle.sourceforge.net/">http://checkstyle.sourceforge.net/</ulink></para>

        <para>Result location: <filename>build\checkstyle\&lt;api
        name&gt;\index.html</filename></para>
      </listitem>

      <listitem>
        <para><command>xins coverage</command></para>

        <para>Description: Reports on the coverage of the API code by the unit
        tests.</para>

        <para>Required libraries: <ulink
        url="http://www.ibiblio.org/maven2/cobertura/cobertura/1.8/cobertura-1.8.jar">cobertura.jar</ulink>,
        <ulink
        url="http://www.ibiblio.org/maven2/asm/asm/2.2.1/asm-2.2.1.jar">asm.jar</ulink></para>

        <para>Web site: <ulink
        url="http://cobertura.sourceforge.net/">http://cobertura.sourceforge.net/</ulink></para>

        <para>Result location: <filename>build\coverage\&lt;api
        name&gt;\index.html</filename></para>
      </listitem>

      <listitem>
        <para><command>xins emma</command></para>

        <para>Description: Reports on the coverage of the API code by the unit
        tests using the EMMA code coverage library.</para>

        <para>Required libraries: <ulink
        url="http://mirrors.ibiblio.org/pub/mirrors/maven2/emma/emma/2.0.5312/emma-2.0.5312.jar">emma.jar</ulink>,
        <ulink
        url="http://mirrors.ibiblio.org/pub/mirrors/maven2/emma/emma_ant/2.0.5312/emma_ant-2.0.5312.jar">emma_ant.jar</ulink></para>

        <para>Web site: <ulink
        url="http://emma.sourceforge.net/">http://emma.sourceforge.net/</ulink></para>

        <para>Result location: <filename>build\coverage\&lt;api
        name&gt;\index.html</filename></para>
      </listitem>

      <listitem>
        <para><command>xins findbugs</command></para>

        <para>Description: Analyses the code in order to indentify possible
        bugs. You will need to set the <property>findbugs.home=&lt;findbugs
        directory&gt;</property> build property.</para>

        <para>Required library: Install <ulink
        url="http://surfnet.dl.sourceforge.net/sourceforge/findbugs/findbugs-1.1.1.zip">findbugs.zip</ulink>.</para>

        <para>Web site: <ulink
        url="http://findbugs.sourceforge.net/">http://findbugs.sourceforge.net/</ulink></para>

        <para>Result location: <filename>build\findbugs\&lt;api
        name&gt;\index.html</filename></para>
      </listitem>

      <listitem>
        <para><command>xins lint4j</command></para>

        <para>Description: Analyses the code in order to indentify possible
        bugs.</para>

        <para>Required library: <ulink
        url="http://www.jutils.com/maven/lint4j/jars/lint4j-0.9.1.jar">lint4j.jar</ulink></para>

        <para>Web site: <ulink
        url="http://www.jutils.com/">http://www.jutils.com/</ulink></para>

        <para>Result location: <filename>build\lint4j\&lt;api
        name&gt;\lint4j-report.txt</filename> and
        <filename>build\lint4j\&lt;api
        name&gt;\lint4j-report.xml</filename></para>
      </listitem>

      <listitem>
        <para><command>xins jdepend</command></para>

        <para>Description: Analyses the package dependency and generates
        design quality metrics.</para>

        <para>Required library: <ulink
        url="http://www.ibiblio.org/maven/jdepend/jars/jdepend-2.9.1.jar">jdepend.jar</ulink>
        in the <filename>ANT_HOME\lib</filename> directory.</para>

        <para>Web site: <ulink
        url="http://clarkware.com/software/JDepend.html">http://clarkware.com/software/JDepend.html</ulink></para>

        <para>Result location: <filename>build\jdepend\&lt;api
        name&gt;\index.html</filename></para>
      </listitem>

      <listitem>
        <para><command>xins cvschangelog</command></para>

        <para>Description: Generates the change log report of the API.</para>

        <para>Required library: None but cvs should be installed.</para>

        <para>Result location:
        <filename>build\cvschangelog\index.html</filename></para>
      </listitem>

      <listitem>
        <para><command>xins glean</command></para>

        <para>Description: Generates a Glean report for the API. Glean is a
        tool agregator that produce a feedback repost about the source code.
        You will need to set the <property>glean.home=&lt;Glean
        directory&gt;</property> build property. If not already provided, a
        <filename>apis\&lt;api name&gt;\glean.properties</filename> file is
        created that you can customize to your wishes.</para>

        <para>Required library: Install <ulink
        url="http://jbrugge.com/glean/glean-1.2.zip">glean.zip</ulink>.</para>

        <para>Web site: <ulink
        url="http://jbrugge.com/glean/">http://jbrugge.com/glean/</ulink></para>

        <para>Result location:
        <filename>build\glean\index.html</filename></para>
      </listitem>

      <listitem>
        <para><command>xins jmeter</command></para>

        <para>Description: Generates <ulink
        url="http://jakarta.apache.org/jmeter/">JMeter</ulink> tests from the
        examples defined in the functions.</para>

        <para>Required library: None.</para>

        <para>Web site: <ulink
        url="http://jakarta.apache.org/jmeter/">http://jakarta.apache.org/jmeter/</ulink></para>

        <para>Result location: <filename>build\jmeter\&lt;api name&gt;\&lt;api
        name&gt;.jmx</filename></para>
      </listitem>

      <listitem>
        <para><command>xins run-jmeter</command></para>

        <para>Description: Runs the JMeter tests. You will need to the set
        <property>jmeter.home=&lt;jmeter directory&gt;</property> property.
        You can set the <property>jmeter.test</property> property for the
        location of the tests without the extension. The default is the
        location of the generated tests.</para>

        <para>Required library: Install <ulink
        url="http://jakarta.apache.org/jmeter/">JMeter</ulink>.</para>

        <para>Web site: <ulink
        url="http://jakarta.apache.org/jmeter/">http://jakarta.apache.org/jmeter/</ulink></para>

        <para>Result location: <filename>build\jmeter\&lt;api
        name&gt;\index.html</filename></para>
      </listitem>

      <listitem>
        <para><command>xins maven</command></para>

        <para>Description: Generates the <ulink
        url="http://maven.apache.org/">Maven</ulink>
        <filename>pom.xml</filename> file for the specified API.</para>

        <para>Required library: None.</para>

        <para>Web site: <ulink
        url="http://maven.apache.org/">http://maven.apache.org/</ulink></para>

        <para>Result location: <filename>apis\&lt;api
        name&gt;\pom.xml</filename></para>
      </listitem>

      <listitem>
        <para><command>xins smd</command></para>

        <para>Description: Generates the <ulink
        url="http://maven.apache.org/">SMD</ulink> (Simple Method Description)
        of the API. You can set the destination of the API with the
        <property>smd.endpoint</property> property. The default is the first
        address in the <filename>environment.xml</filename> file with
        <literal>?_convention=_xins-jsonrpc</literal>.</para>

        <para>Required library: None.</para>

        <para>Result location: <filename>build\smd\&lt;api
        name&gt;.smd</filename></para>
      </listitem>

      <listitem>
        <para><command>xins xsd-to-types</command></para>

        <para>Description: Generates .typ files with the types defined in the
        given XML Schema files for the specified API.</para>

        <para>Parameters: xsd.dir - Directory containing the XML Schema files
        (*.xsd)</para>

        <para>Required library: None.</para>

        <para>Result location: <filename>apis\&lt;api
        name&gt;\*.typ</filename></para>
      </listitem>

      <listitem>
        <para><command>xins wsdl-to-api</command></para>

        <para>Description: Generates an API specification based on a <ulink
        url="http://www.w3.org/TR/wsdl">WSDL</ulink> file or URL.</para>

        <para>Parameters: wsd.location - The location of the WSDL (local file
        or URL)</para>

        <para>Required library: None.</para>

        <para>Result location: <filename>apis\&lt;api
        name&gt;\api.xml</filename> <filename>apis\&lt;api
        name&gt;\*.fnc</filename> <filename>apis\&lt;api
        name&gt;\*.typ</filename> <filename>apis\&lt;api
        name&gt;\*.rcd</filename></para>
      </listitem>

      <listitem>
        <para><command>xins webstart</command></para>

        <para>Description: Generates a Java WebStart file (also called JNLP
        file) to run the API.</para>

        <para>Required library: None.</para>

        <para>Result location: <filename>build\webstart\&lt;api
        name&gt;.jnlp</filename></para>

        <para>Note you will need to sign the WAR file if you want to make the
        API available online.</para>
      </listitem>

      <listitem>
        <para><command>xins appengine</command></para>

        <para>Description: Generates a Google App Engine of the Web
        Service.</para>

        <para>Required library: Google App Engine SDK.</para>

        <para>Result location: <filename>build\webapps\&lt;api
        name&gt;</filename></para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="performance">
    <title>Performances</title>

    <para>XINS performances are regularly measured. An <ulink
    url="http://xins.sourceforge.net/articles/performance.html">old article
    about XINS performance</ulink> shows that XINS could be even faster than
    the competition.</para>

    <para>The number of logs written per call is one of the important factor
    that can slow down or increase the performance of an API. You are advice
    to only log necessary messages.</para>

    <sect2>
      <title>Compressed data</title>

      <para>Since XINS 3.1, GZip compressed data are also accepted. If not
      already done, you are adviced to configure the HTTP Server or the
      Servlet container to return compressed data.</para>

      <para>If the Servlet container runs in a HTTP Server, it's better to
      configure the compression on the HTTP Server. For example for Apache
      server, use <ulink
      url="http://httpd.apache.org/docs/2.2/mod/mod_deflate.html">mod_deflate</ulink>.</para>

      <para>For Tomcat add to the <filename>server.xml</filename>
      <literal>&lt;Connector&gt;</literal> element the following attributes:
      <code>compression="on" compressionMinSize="2048"
      noCompressionUserAgents="gozilla, traviata"
      compressableMimeType="text/html,text/xml,application/xhtml+xml,text/javascript,application/json"</code>.</para>

      <para>For Jetty, you need to <ulink
      url="http://blog.max.berger.name/2010/01/jetty-7-gzip-filter.html">add a
      Servlet Filter</ulink>. This is done in <filename>impl.xml</filename>
      with the following code:</para>

      <screen>&lt;web-app element="filter"&gt;
  &lt;web-app element="filter-name"&gt;GzipFilter&lt;/web-app&gt;
  &lt;web-app element="filter-class"&gt;org.eclipse.jetty.servlets.GzipFilter&lt;/web-app&gt;
  &lt;!-- &lt;web-app element="filter-class"&gt;org.mortbay.servlet.GzipFilte&lt;/web-app&gt; for Jetty 6--&gt;
  &lt;web-app element="init-param"&gt;
    &lt;web-app element="param-name"&gt;mimeTypes&lt;/web-app&gt;
    &lt;web-app element="param-value"&gt;text/html,text/xml,application/xhtml+xml,application/javascript,application/json&lt;/web-app&gt;
  &lt;/web-app&gt;
&lt;/web-app&gt;
&lt;web-app element="filter-ampping"&gt;
  &lt;web-app element="filter-name"&gt;GzipFilter&lt;/web-app&gt;
  &lt;web-app element="url-pattern"&gt;/*&lt;/web-app&gt;
&lt;/web-app&gt;</screen>

      <para>For other servlet containers, you can add in a the Jetty filter by
      adding jetty library as dependencies and the code above or use the
      <ulink
      url="http://sourceforge.net/projects/pjl-comp-filter/">pjl-comp-filter</ulink>
      project.</para>
    </sect2>

    <sect2>
      <title>Cached data</title>

      <para>There are a lot for cases in web services where getting data is
      much often called than creating or updating data. For example, getting
      the data of the top 100 products of the catalog of getting the data of
      the currently logged users.</para>

      <para>XINS 3.1 adds the possibility to specify how long the data for a
      function could be cached on the client side. This is done by adding a
      <property>cache</property> attribute to the
      <property>function</property> element in the <literal>fnc</literal>
      file. The value being the number of seconds that the result could be
      cached.</para>

      <screen>&lt;?xml version="1.0" encoding="US-ASCII"?&gt;
&lt;!DOCTYPE function PUBLIC "-//XINS//DTD Function 3.1//EN" "http://xins.sourceforge.net/dtd/function_3_1.dtd"&gt;
&lt;function name="FastData" cache="60"&gt;
   ...
&lt;/function&gt;</screen>

      <para>If the client is a browser the data will be cached automatically
      in the browser cache.</para>

      <para>To use the cache system for the XINS client API of with the
      XINSServiceCaller, you will need to set the <ulink
      url="http://hc.apache.org/httpcomponents-client-ga/httpclient-cache/index.html">CachingHttpClient</ulink>
      in XINSCallConfig:<screen>XINSCallConfig config = new XINSCallConfig();
config.setHttpClient(new CachingHttpClient(config.getHttpClient()));
capi.setXINSCallConfig(config);
// or in the XINSCallRequest: request.setXINSCallConfig(config);</screen></para>

      <para>Note that HttpClient cache is not included in XINS, so to use it
      you need to download it and add it to the dependencies.</para>

      <note>
        <para>HttpClient cache has support for advanced cache such as ehcache
        and memcache. You can then for example use a shared or distributed
        cache. If the same software is updating the data, you can remove the
        cache entry when after the update function is called.</para>
      </note>
    </sect2>

    <sect2>
      <title>Not modified data</title>

      <para>There are also cases where data should be accurate but is not
      often updated. For example the price or availability of a product. In
      this case the server is returning all the time the same data, using
      unneeded resources such as CPU and bandwidth.</para>

      <para>XINS 3.1 add the notion of returning <returnvalue>not
      modified</returnvalue> to the client. In this case the HTTP status code
      304 is returned and no data is including in the body of the
      message.</para>

      <para>To return not modified, just add <code>return new
      NotModifiedResult();</code> in the implementation class when you know
      that the result is identical to the last request of the same
      client.</para>

      <para>On the client side, a <methodname>isNotModified()</methodname>
      method has been added to <classname>XINSCallResult</classname>.</para>

      <para>For the CAPI a <classname>NotModifiedException</classname> (which
      extends <classname>XINSCallException</classname>) will be thrown.</para>
    </sect2>
  </sect1>

  <sect1 id="package">
    <title>Content of the XINS package</title>

    <para>This chapter gives a description of the files and directories
    included in XINS package, so that you can find the wanted information
    quicker.</para>

    <sect2 id="documentation">
      <title>Documentation</title>

      <para>In the top directory of XINS, the following documents are
      available:</para>

      <itemizedlist>
        <listitem>
          <para><filename>README.html</filename> contains a quick description
          of XINS, links to the documentation and quick start to run a small
          project.</para>
        </listitem>

        <listitem>
          <para><filename>CHANGES</filename> contains the change logs between
          each releases.</para>
        </listitem>

        <listitem>
          <para><filename>NOTES</filename> contains the release notes with the
          known bugs and the OS and Java version with which XINS has been
          tested.</para>
        </listitem>
      </itemizedlist>

      <para>The docs directory contains the following documents:</para>

      <itemizedlist>
        <listitem>
          <para>The user guide (it's this document)</para>
        </listitem>

        <listitem>
          <para>The Javadoc of the XINS.</para>
        </listitem>

        <listitem>
          <para>The XINS primer. The primer is a description step by step on
          how to create your first API.</para>
        </listitem>

        <listitem>
          <para>HTML Logdoc. This document contains a description of the
          message logged by XINS.</para>
        </listitem>

        <listitem>
          <para>The XINS protocol. This document explains the communication
          protocol for the REST calling convention.</para>
        </listitem>
      </itemizedlist>

      <para>On the website <ulink
      url="http://www.xins.org/documentation.html">http://www.xins.org/documentation.html</ulink>,
      the following extra documentation is available</para>

      <itemizedlist>
        <listitem>
          <para>A document to help you <ulink
          url="http://xins.sourceforge.net/articles/migration2-3to3-0.html">migrate
          API</ulink> written for XINS 2.3 or lower to XINS 3.0.</para>
        </listitem>

        <listitem>
          <para>Articles over <ulink
          url="http://xins.sourceforge.net/articles/asynchronous.html">Asynchronious
          calls</ulink>, <ulink
          url="http://xins.sourceforge.net/articles/resultcaching.html">Result
          caching</ulink>, API implementation with <ulink
          url="http://xins.sourceforge.net/articles/scripting.html">scripting
          languages</ulink> and <ulink
          url="http://xins.sourceforge.net/articles/performance.html">XINS
          performance</ulink>.</para>
        </listitem>

        <listitem>
          <para>Presentations of XINS for <ulink
          url="http://xins.sourceforge.net/presentations/xins_intro.pdf">managements</ulink>
          and <ulink
          url="http://xins.sourceforge.net/presentations/frameworks_and_xins.pdf">developers</ulink>.</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 id="examples">
      <title>Examples</title>

      <para>Three API examples are distributed with XINS. The API's are
      located in the directory <filename>demo\xins-project</filename>.</para>

      <para>Here is a description of the API's:</para>

      <itemizedlist>
        <listitem>
          <para><literal>myproject</literal>: This example is a very basic
          example, much like a "Hello World" example.</para>
        </listitem>

        <listitem>
          <para><literal>allinone</literal>: This example uses most of the
          features including in XINS. The API contains 1 new feature per
          function.</para>
        </listitem>

        <listitem>
          <para><literal>filteredproject</literal>: This example is an API
          that uses the generated CAPI to call another API (the myproject
          API).</para>
        </listitem>
      </itemizedlist>

      <para>The examples also include client examples. This shows how to call
      an API using different programming languages.</para>

      <para>The most interesting examples are the <ulink
      url="http://en.wikipedia.org/wiki/Ajax_%28programming%29">Ajax</ulink>
      examples located in the directory
      <filename>demo\capis\javascript</filename>. These examples show how to
      call a XINS API synchroniously or asynchroniously with Javascript and
      insert the result in the current HTML page. XINS works particularly well
      with Ajax thanks to the REST calling convention and the XSLT calling
      convention.</para>

      <para>Here is a description of the Ajax examples:</para>

      <itemizedlist>
        <listitem>
          <para><filename>callMyFunction.html</filename> calls the XINS API
          using the REST calling convention and insert the result of the call
          in the web page.</para>
        </listitem>

        <listitem>
          <para><filename>callMetaFunction.html</filename> calls the XINS API
          using the XSLT calling convention and insert the HTML returned by
          the call in the web page.</para>
        </listitem>

        <listitem>
          <para><filename>callMyFunction2.html</filename> calls the XINS API
          using the REST calling convention and tranform the returned result
          using XSLT on the client side. It then inserts the HTML in the web
          page.</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>Because of security issues, when these examples are executed
        locally using Netscape as browser,
        <filename>callMyFunction.html</filename> will ask for authorisation,
        <filename>callMetaFunction.html</filename> will fail and
        <filename>callMyFunction2.html</filename> will fail.</para>
      </note>

      <para>XINS also contain examples on how to call an API using PHP version
      4 and 5, Perl and Java. If you want to call a XINS API using another
      language, just call the API using the URL and parse the returned XML.
      You can also use the SOAP calling convention or the XML-RPC calling
      convention.</para>
    </sect2>

    <sect2 id="program">
      <title>Program</title>

      <para>The package not only contains the documentation and the examples,
      it contains also the program :-).</para>

      <para>The program is located in different directories:</para>

      <itemizedlist>
        <listitem>
          <para><filename>bin</filename> contains the shell scripts. This
          directory should be in you <envar>PATH</envar> environment
          variable.</para>
        </listitem>

        <listitem>
          <para><filename>build</filename> contains the XINS library.</para>
        </listitem>

        <listitem>
          <para><filename>lib</filename> contains the third party libaries
          used by XINS with their license.</para>
        </listitem>

        <listitem>
          <para><filename>src</filename> contains XINS source code as well as
          the XSLT, XML and css files used for the code generation.</para>
        </listitem>
      </itemizedlist>

      <para>A Ant <filename>build.xml</filename> script is provided in the
      root directory in the case you want to recompile XINS.</para>
    </sect2>
  </sect1>

  <sect1 id="integration.ide">
    <title>Integration with IDE</title>

    <para>This chapter will help you to configure a development environment so
    that you can create, develop, test and debug a project faster.</para>

    <para>If you have found some more settings that helped you to develop the
    XINS API faster using Eclipse, send the procedure to <ulink
    url="mailto:anthony.goubard@japplis.com">anthony.goubard@japplis.com</ulink>.</para>

    <sect2 id="integration.eclipse">
      <title>Integration with Eclipse.</title>

      <para>The Eclipse version used for this manual is 3.2 and can be found
      at <ulink
      url="http://www.eclipse.org/platform">http://www.eclipse.org/platform</ulink>.</para>

      <note>
        <para>As described in the install section, if you're using the Ant
        distribution included with Eclipse, you may need to copy <ulink
        url="http://mirrors.ibiblio.org/pub/mirrors/maven2/xerces/xercesImpl/2.6.2/xercesImpl-2.6.2.jar">xercesImpl-2.6.2.jar</ulink>
        to the <filename>plugins\org.apache.ant_1.6.5\lib</filename> directory
        to avoid <errortext>putDocumentInCache</errortext> error messages. If
        you still have the error, install Ant and go to <guilabel>Window -&gt;
        Preferences -&gt; Ant -&gt; Runtime -&gt; Ant Home...</guilabel> and
        choose the Ant directory.</para>

        <para>As Eclipse locks the opened files, you choose close them before
        calling the <command>create-xxx</command> targets. For example
        <filename>xins-projects.xml</filename> should be closed before calling
        <command>create-api</command>.</para>
      </note>

      <sect3 id="eclipse.target">
        <title>xins eclipse</title>

        <itemizedlist>
          <listitem>
            <para>If the xins-project.xml is not already created, create it in
            a new directory with the content specified in <xref
            linkend="xins-project.xml"/>.</para>
          </listitem>

          <listitem>
            <para>In <guilabel>Run -&gt; External Tools -&gt; External
            Tools</guilabel>, create a new program with the name
            <literal>xins</literal>, the location set to the
            <filename>xins\bin\xins.bat</filename> file and the working
            directory to the directory containing
            <filename>xins-projects.xml</filename>. Then you need to add in
            the arguments the <literal>${string_prompt}</literal> variable and
            add in environment the variable <envar>XINS_HOME</envar> with the
            value of the XINS directory.</para>
          </listitem>

          <listitem>
            <para>If the API is not created, click on the
            <guibutton>run</guibutton> button and enter
            <userinput>create-api</userinput>. This target will ask a series
            of question in order to create the API including the first
            function of the API.</para>
          </listitem>

          <listitem>
            <para>Click on the <guibutton>run</guibutton> button and enter
            <userinput>eclipse</userinput>. Enter the name of the API.</para>
          </listitem>

          <listitem>
            <para>The command will create a
            <filename>xins-eclipse.userlibraries</filename> in the
            <filename>xins\src\tools\eclipse</filename> directory. Then go to
            <guilabel>Window -&gt; Preferences -&gt; Java -&gt; Build Path
            -&gt; User Libraries -&gt; Import... -&gt; Browse</guilabel> and
            select the <filename>xins-eclipse.userlibraries</filename> file.
            This step only needs to be done once.</para>
          </listitem>

          <listitem>
            <para>After the <command>eclipse</command> command, depending on
            the directory location of the api:</para>

            <itemizedlist>
              <listitem>
                <para>If your project is outside your workspace, choose
                <guilabel>File -&gt; New -&gt; Project... -&gt; Java -&gt;
                Java Project</guilabel> -&gt; fill the project name -&gt;
                <guilabel>Create project from existing source</guilabel> and
                choose the apis\&lt;api name&gt; directory -&gt;
                <guibutton>Finish</guibutton>.</para>
              </listitem>

              <listitem>
                <para>If your project is in your workspace, choose
                <guilabel>File -&gt; Import... -&gt; General -&gt; Existing
                Projects into Workspace -&gt; Next</guilabel> -&gt; choose the
                apis\&lt;api name&gt; directory -&gt;
                <guibutton>Finnish</guibutton>.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </sect3>

      <sect3 id="eclipse.tomcat">
        <title>Run it with Tomcat plug-in.</title>

        <para>In order to be able to run and debug your web application,
        you'll need to install Tomcat (<ulink
        url="http://jakarta.apache.org/tomcat/">http://jakarta.apache.org/tomcat/</ulink>)
        and the Tomcat plug-in for Eclipse (<ulink
        url="http://www.sysdeo.com/eclipse/tomcatplugin">http://www.sysdeo.com/eclipse/tomcatplugin</ulink>).</para>

        <para>Configure the Tomcat plug-in in the Preferences:</para>

        <itemizedlist>
          <listitem>
            <para>Set the Tomcat home to the location where you have installed
            Tomcat</para>
          </listitem>

          <listitem>
            <para>Add, in the JVM settings, the JVM parameter
            <literal>-Dorg.xins.server.config=c:\java\tomcat\conf\xins.properties</literal>
            (the <filename>xins.properties</filename> could also be in another
            directory). For more details about the
            <filename>xins.properties</filename>, read <xref
            linkend="xins.properties"/>.</para>
          </listitem>

          <listitem>
            <para>Change the Configuration file to <filename>apis\&lt;api
            name&gt;\tomcat-server.xml</filename>.</para>
          </listitem>

          <listitem>
            <para>Start Tomcat.</para>
          </listitem>
        </itemizedlist>
      </sect3>

      <sect3 id="eclipse.jetty">
        <title>Run it and debug it with Jetty plug-in.</title>

        <para>You can also use the Jetty plug-in for Eclipse. To install it,
        go to Help -&gt; Software Updates -&gt; Find and Install... -&gt;
        Search for new features to install -&gt; Add Update Site. Then enter
        the name JettyLauncher and the URL <ulink
        url="http://jettylauncher.sourceforge.net/updates/">http://jettylauncher.sourceforge.net/updates/</ulink>.</para>

        <itemizedlist>
          <listitem>
            <para>Create an Jetty XML file to link a directory to the
            <filename>build/webapps/&lt;api&gt;/&lt;api&gt;.war</filename>
            file.</para>
          </listitem>

          <listitem>
            <para>Go to Run -&gt; Run...</para>
          </listitem>

          <listitem>
            <para>Create a new Jetty Web project</para>
          </listitem>

          <listitem>
            <para>Set a name for the project, set the Jetty home</para>
          </listitem>

          <listitem>
            <para>Click on Use a Jetty configuration file and set the value to
            the Jetty XML file you've created</para>
          </listitem>

          <listitem>
            <para>Go to the argument tab and add the parameter
            <literal>-Dorg.xins.server.config=&lt;jetty_home&gt;\etc\xins.properties</literal>.</para>
          </listitem>

          <listitem>
            <para>Now you can run, add breakpoints and debug your web
            application using the buttons on the toolbar</para>
          </listitem>
        </itemizedlist>
      </sect3>

      <sect3 id="eclipse.other">
        <title>Other improvements.</title>

        <para>With Eclipse, by changing the code and saving it you can run
        your modification without recompiling if the modification is minimal.
        If you modified a lot of code, you will need to regenerate the war
        file.</para>

        <para>If you have also generated the specific documentation you may
        want to use the test forms or the example to test your project. To do
        so, create a new External tool named specdocs with the main program
        linked to your HTML Browser and the arguments set to
        <filename>build\specdocs\&lt;api&gt;\index.html</filename>
        file.</para>

        <para>In order to be able to edit the specifications that are in XML,
        we also advise that you install a XML plug-in for eclipse such as
        XMLBuddy (<ulink
        url="http://www.xmlbuddy.com/">http://www.xmlbuddy.com/</ulink>) or
        XML Author (<ulink
        url="http://www.svcdelivery.com/xmlauthor/">http://www.svcdelivery.com/xmlauthor/</ulink>).
        Then in Preferences -&gt; Workbench -&gt; File Associations, add
        <literal>*.fnc</literal>, <literal>*.typ</literal> and
        <literal>*.rcd</literal> associated with the XML tool.</para>

        <para>If you execute the <literal>clean</literal> target, you may have
        afterwards a window popping up asking you to choose between
        <filename>build.xml</filename> and <filename>build.xml (1)</filename>.
        To remove this window go to External Tools... menu and remove the
        <literal>build.xml (1)</literal> configuration.</para>
      </sect3>
    </sect2>

    <sect2 id="integration.netbeans">
      <title>Integration with NetBeans</title>

      <para>The version of NetBeans used for this manual is 5.0 and can be
      downloaded at <ulink
      url="http://www.netbeans.org/">http://www.netbeans.org/</ulink>.</para>

      <sect3 id="netbeans.setting.project">
        <title>Setting up the project.</title>

        <para>An Ant script for NetBeans 5.0 or higher is provided with XINS.
        It requires a correctly set <envar>XINS_HOME</envar> environment
        variable.</para>

        <itemizedlist>
          <listitem>
            <para>Add the DTD catalog by clicking on the
            <guilabel>runtime</guilabel> tab, right click on the <guilabel>DTD
            and XML Schema Catalogs</guilabel> item and add the OASIS catalog
            located at <filename>src\dtd\xinsCatalog.xml</filename>.</para>
          </listitem>

          <listitem>
            <para>Register some extension as XML files in
            <literal><guilabel>Tools -&gt; Options -&gt; Advanced Options
            -&gt; IDE Configuration -&gt; System -&gt; Object Types -&gt;
            XMLObjects -&gt; Extensions and MIME Types</guilabel></literal> by
            adding the items <literal>fnc</literal>, <literal>typ</literal>,
            <literal>rcd</literal> and <literal>cat</literal>. Check also at
            the same time the XML Indentation Engine settings. From NetBeans
            6.5 <literal><guilabel>Tools -&gt; Options -&gt; Miscellaneous
            -&gt; Files</guilabel></literal></para>
          </listitem>

          <listitem>
            <para>Open the project in
            <filename>demo\xins-project\apis\petstore</filename>.</para>
          </listitem>

          <listitem>
            <para>If the API already exists, execute the
            <literal>copy-nb-files</literal> target of the
            <filename>nbbuild.xml</filename>.</para>
          </listitem>

          <listitem>
            <para>If you want to create a new API, execute the
            <literal>create-api</literal> target. This target will ask a
            series of question in order to create the API including the first
            function of the API.</para>
          </listitem>

          <listitem>
            <para>Open the project by selecting the directory of the API:
            <filename>&lt;project dir&gt;\apis\&lt;api
            name&gt;</filename></para>
          </listitem>

          <listitem>
            <para>You can now open your function implementation file and write
            it's implementation in the <methodname>Result call(Request
            request)</methodname> method.</para>
          </listitem>

          <listitem>
            <para>Click on the <guibutton>Compile</guibutton> button to
            compile, on the <guibutton>Run</guibutton> button to run your API,
            on the <guibutton>Debug</guibutton> button to debug it or on the
            <guibutton>Apply Code Changes</guibutton> if you have modified the
            code with debugging.</para>
          </listitem>

          <listitem>
            <para>To profile the API, install NetBeans profiler (<ulink
            url="http://profiler.netbeans.org/">http://profiler.netbeans.org/</ulink>)
            and execute the profile target.</para>
          </listitem>
        </itemizedlist>

        <para>In NetBeans, the targets can be executed by right-clicking on
        the <filename>nbbuild.xml</filename> and <literal>Run target</literal>
        or by right-clicking on the project icon or by using the toolbar if
        your project is the main project.</para>

        <para>In NetBeans you can set conditional breakpoints or exception
        breakpoints that stop the debugger whenever an exception is
        thrown.</para>

        <para>Targets to deploy your API in Tomcat are provided. You can then
        use the Netbeans HTTP Monitor with it.</para>

        <para>If NetBeans 6 has problems to recognize the
        <classname>Request</classname> and <classname>Result</classname>
        objects, you can add the option
        <parameter>-J-DCacheClassPath.keepJars=true</parameter> in the
        Netbeans <filename>etc\netbeans.conf</filename> file.</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="integration.frameworks">
    <title>Integration with other frameworks</title>

    <para>XINS is based on several standard such as POJO, Servlet API, SOAP,
    REST or Ant which eases the integration with other frameworks.</para>

    <sect2 id="integration.spring">
      <title>Spring framework</title>

      <para>XINS can easily be integrated with the <ulink
      url="http://www.springframework.org/">Spring Framework</ulink>.</para>

      <para>XINS generates POJO's for requests and result on the client and
      server side. The classes and the methods are public so that they can be
      called from another package. The generated POJO's try to follow the Java
      Beans specification as much as possible.</para>

      <para>For example, if you want to use Spring AOP transaction for a
      specific API, you can define as point cut all methods starting with call
      in the generated CAPI class.</para>

      <para>On the server side, XINS is a Servlet so you can use it with
      <ulink
      url="http://www.springframework.org/docs/api/org/springframework/web/servlet/package-summary.html">org.springframework.web.servlet.*</ulink>.</para>

      <para>XINS also includes a Spring framework package. The package is
      located in <literal>org.xins.common.spring</literal> (<ulink
      url="javadoc/org/xins/common/spring/index.html">javadoc</ulink>). This
      package is adding a few convinient classes for validation, factory bean
      and client interceptor.</para>

      <para>If you want to load and access an Application Context in the API,
      you need to add Spring, and a listener to
      <filename>impl.xml</filename>:<screen>&lt;web-app element="context-param"&gt;
  &lt;web-app element="param-name"&gt;contextConfigLocation&lt;/web-app&gt;
  &lt;web-app element="param-value"&gt;/WEB-INF/applicationContext*.xml&lt;/web-app&gt;
&lt;/web-app&gt;
&lt;web-app element="listener"&gt;
  &lt;web-app element="listener-class"&gt;
    org.springframework.web.context.ContextLoaderListener
  &lt;/web-app&gt;
&lt;/web-app&gt;
&lt;content dir="api/myproject" includes="applicationContext*.xml" /&gt;
&lt;dependency dir="spring" includes="spring.jar" /&gt;</screen></para>

      <para>Then to get access to the bean defined in the application context
      use annotations such as <literal>@Component</literal> or
      <literal>@Autowired</literal>.</para>
    </sect2>

    <sect2 id="integration.dojo">
      <title>Dojo toolkit</title>

      <para>The <ulink url="http://dojotoolkit.org/">Dojo toolkit</ulink> has
      several ways to communicate with the server.</para>

      <para>One of it is JSON-RPC (dojo.rpc.JsonService) which is also
      supported by XINS on the server side with the
      <literal>_xins-jsonrpc</literal> calling convention. The easiest way to
      use this JsonService is in combinaison with a SMD (Simple Method
      Description). SMD is a file which describes the name of the methods of
      the API with the expected parameters. There are two ways to get this
      file from XINS. Either execute the <command>xins smd</command> command
      that will generate the file <filename>build\smd\&lt;api
      name&gt;.smd</filename> or by calling the meta function
      <literal>_SMD</literal> to the API you want to invoke. An example is
      provided in
      <filename>demo\capis\javascript\callMyFunctionDojo.html</filename>.</para>

      <para>You can also use dojo.rpc.YahooService where calls will be
      received by the <literal>_xins-json</literal> calling convention. This
      service is also able to read and interpret the SMD file.</para>
    </sect2>

    <sect2 id="integration.gwt">
      <title>Google Web Toolkit (GWT)</title>

      <para><ulink url="http://code.google.com/webtoolkit/">GWT</ulink> has
      mostly two ways to communicate with a server. They first have <ulink
      url="http://code.google.com/webtoolkit/documentation/com.google.gwt.doc.DeveloperGuide.RemoteProcedureCalls.html">their
      own RPC system</ulink>. GWT also facilitates the call to APIs using the
      Yahoo JSON protocol which matches the <literal>_xins-json</literal>
      calling convention.</para>

      <para>An example is provided at <ulink
      url="http://gwt.google.com/samples/JSON/JSON.html">http://gwt.google.com/samples/JSON/JSON.html</ulink>.</para>

      <para>Note that XINS also supports the callback parameter which is use
      to indicate to the call which method should be called with the output
      parameter when the response returns.</para>
    </sect2>

    <sect2 id="integration.ajax">
      <title>AJAX</title>

      <para>The others (than Dojo and GWT) AJAX frameworks are also
      supported.</para>

      <para>They have different ways to call XINS. They can use the _xins-json
      or _xins-jsonrpc calling conventions but also the _xins-std and parse
      the returned XML themselve or use the _xins-xslt calling convention in
      combination with an XSLT stylesheet that transform the XML in the HTML
      to insert dynamiccally in the page.</para>

      <para>Several examples of the later are provided in the
      <filename>demo\capis\javascript</filename> directory.</para>
    </sect2>

    <sect2 id="integration.mule">
      <title>Mule</title>

      <para><ulink
      url="http://mule.codehaus.org/display/MULE/Home">Mule</ulink> is the
      most popular open source Entreprise Service Bus (ESB).</para>

      <para>As XINS is a Servlet, you can register a handler on the URI
      (embedded Jetty), or bind through an existing web container (servlet
      endpoint).</para>

      <para>Documentation can be found in the <ulink
      url="http://mule.codehaus.org/docs/apidocs/org/mule/providers/http/jetty/package-summary.html">org.mule.providers.http.jetty</ulink>
      package or in the <ulink
      url="http://mule.codehaus.org/docs/apidocs/org/mule/providers/http/servlet/package-summary.html">org.mule.providers.http.servlet</ulink>
      package.</para>
    </sect2>

    <sect2 id="integration.javaee">
      <title>ESB and JavaEE</title>

      <para>Most of modern ESB support the possibility to plug JavaEE servers
      to it and as part of the JavaEE specification there is the possibility
      to deploy and run Servlet, there shouldn't be any problem to install
      XINS APIs in an ESB and/or JavaEE server.</para>

      <para>The main problem can only be to indicate where find the runtime
      properties file, as it is normally done using the
      <property>org.xins.server.config</property> system property. If you
      cannot set this property, you can also include the runtime property file
      to use in the WAR file as <filename>WEB-INF/xins.properties</filename>.
      Use the <literal>&lt;content dir="&lt;path&gt;"
      includes="xins.properties" web-path="WEB-INF" /&gt;</literal> element in
      <filename>impl.xml</filename> file.</para>

      <para>Orchestration is also an important feature in ESB. It can be done
      using WS-BPEL as XINS APIs can communicate using SOAP with the
      <literal>_xins-soap</literal> calling convention. The API can also give
      the WSDL file to indicate the SOAP message format with the
      <literal>_WSDL</literal> meta function.</para>
    </sect2>

    <sect2 id="integration.ant">
      <title>Ant</title>

      <para>XINS uses Ant to generate the different files. It is also possible
      to run the tests or the API with Ant targets. The easiest way to do it
      is to use the xins task as described in the <xref
      linkend="xins.task"/>.</para>

      <para>Another possibility is to look at the nbbuild.xml file included
      with the petstore demo and can be used for other existing APIs or new
      APIs. Note that some of the targets are NetBeans specific but most of
      them not.</para>
    </sect2>

    <sect2 id="integration.maven">
      <title>Maven</title>

      <para>XINS also has support for Maven 2.</para>

      <para>Each stable releases are added in the Maven 2 repository (<ulink
      url="http://www.ibiblio.org/maven/org.xins/">http://www.ibiblio.org/maven/org.xins/</ulink>).
      Note that not only the jar files are included, the source code and the
      Javadoc are also included.</para>

      <para>If you want to build your API using API using Maven, you can
      execute <command>xins maven</command> command which will create the
      <filename>&lt;api name&gt;.pom</filename> in the <filename>apis\&lt;api
      name&gt;</filename> directory. Note that the external dependencies
      (other than XINS) are not included in the generated POM and you should
      add them manually.</para>
    </sect2>

    <sect2 id="integration.script">
      <title>Script languages (Groovy, Ruby, PHP, Perl...)</title>

      <para>On the client side it is possible to either call the standard
      calling convention or use a standard protocol such as SOAP or
      XML-RPC.</para>

      <para>As the standard calling convention is simple, it should be easy to
      write a script that creates a URL, send it and parses the XML response
      returned.</para>

      <para>Some of the script also have libraries to call a server by using
      SOAP or XML-RPC. XML-RPC clients are listed at <ulink
      url="http://www.xmlrpc.com/directory/1568/implementations">http://www.xmlrpc.com/directory/1568/implementations</ulink>.</para>

      <para>Examples with different script are provided in the
      <filename><filename>demo\capis</filename></filename> directory.</para>

      <para>You can also implement an API using a script language. In this
      case you need to use a library to pass the input parameters to the
      script and get the output parameters from the script. An example is
      provided in XINS using Groovy as script language in the
      <filename>demo\xins-project\apis\toolbox</filename> directory.</para>
    </sect2>

    <sect2 id="integration.appengine">
      <title>Google App Engine (work in progress)</title>

      <para>Since XINS 2.3, a new command <command>xins appengine</command>
      allow to package the API and deploy it on the <ulink
      url="http://appengine.google.com">Google App Engine</ulink>.</para>

      <para>You will need to specify the location of the appengine SDK with
      the <literal>appengine.sdk.dir</literal> property.</para>

      <para>The Google App Engine requires a
      <filename>appengine-web.xml</filename> in the
      <filename>WEB-INF</filename> directory. If you don't have one XINS will
      create one for you (in <filename>build/webapps/&lt;api
      name&gt;/war/WEB-INF</filename>). You may need to change the application
      name and version (. and _ are not accepted in version). Another
      possibility is to set <literal>appengine.api.name</literal> and
      <literal>appengine.api.version</literal> build properties.</para>

      <para>Also as there is no runtime properties, the file specified in the
      <literal>org.xins.server.config</literal> build property will be
      used.</para>
    </sect2>
  </sect1>
</article>
