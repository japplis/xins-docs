$Id: TODO,v 1.6 2005/11/02 08:29:16 znerd Exp $

This file lists the planned changes for XINS.


______________________________________________________________________________
XINS PROTOCOL AND SPECIFICATION FORMAT

* Support API inheritance.
  --> Do we really want this?
* Define regular expression for input parameter names.
* Allow freezing of api.xml files. Support 'freeze' attribute in DTD and
  copy behaviour from behaviour for frozen .fnc files.

______________________________________________________________________________
XINS/JAVA SERVER FRAMEWORK

* Change implementation of meta-functions from one method per meta-function to
  one class per meta-function.
* A new maximum call duration (for a specific function) could be logged.
* Set state in API class using private setState(State) method.
* Support returning of call ID in function output, as an output parameter
  named '_callID'.
* Implement a function called _DumpStatistics that writes the statistics in a
  comma separated line in a text file.
  --> After XINS 1.0, perhaps in 1.1.
* Stop runtime configuration file watch thread when the servlet is disposed.
  --> After XINS 1.0, perhaps in 1.1.
* Log that the runtime properties file is opened at startup (DEBUG level).
  --> Before XINS 1.0.
* Improve the performance of the parsing of the query string by using a custom
  method to do this. Return an HTTP error code if the query string is invalid,
  for example if it contains duplicate parameter names.
  --> Can be done after XINS 1.0. Unit tests should be written before
      development is started. This is a stand-alone task that can be done by
      anyone.
* Fail (in the EngineStarter, method determineAPIName() ?) if the API name is
  not set in the bootstrap properties.
* Make class AccessRuleFile final.

______________________________________________________________________________
XINS/JAVA CLIENT FRAMEWORK

* Add method getRemoteSettings() to class AbstractCAPI. Functionality: Calls
  _GetSettings and converts the result to a RemoteSettings object with build
  properties, runtime properties and system properties.
  --> This may not be such a good idea.
* Add multi-call functionality to CallTargetGroup.
  --> This should be given some more thought.
* Add class MultiCallResult that maps ActualFunctionCaller instances to a
  result. The result is either a CallException or a CallResult.
  --> This should be given some more thought.
* Create subclass of UnsuccessfulCallException for the _InvalidRequest error
  code.
  --> This should be given some more thought.
* Make sure that the XINSServiceCaller properly supports HTTP result codes
  other than 200. Document the behaviour. Redirects should probably not be
  followed, but this has to be determined. Perhaps a configuration setting
  should be introduced to control the behaviour.
* Use an IndexedMap in class XINSServiceCaller, for improved iteration
  performance.
  --> To be investigated. Probably best to do this after XINS 1.0.
* Throw an InvalidKeyException in class XINSServiceCaller, when and where
  appropriate.
  --> To be investigated.
* Add the possibility to link CAPI to a local WAR file. The invocation of the
  method is then local instead of a remote call via HTTP.

______________________________________________________________________________
XINS/JAVA COMMON LIBRARY

* Change Type class to add a 'version' property.
  --> This should be given some more thought.
* Change ExpiryFolder to allow retrieval of slot info.

______________________________________________________________________________
LOGDOC

* Support element in log.xml to reserve an ID that was previously used. For
  example <reserve id="1502" />

______________________________________________________________________________
GENERATED SPECIFICATION DOCUMENTATION

* Check all names using regular expressions.
* Have a page per environment with links to _GetVersion, _GetStatistics,
  _GetSettings, etc. Let the link on the page for an API link to that page.
* Link to CVSweb or ViewCVS.
* On specification documentation page for a result code: Have a list of links
  to the functions that specify they may return the result code.
* Generate Docbook from the specifications.
* Have an item for a result code page in the header.
* Per type have a list of input parameters, output parameters and data element
  attributes that are defined as of this type.

______________________________________________________________________________
GENERATED TEST FORMS

* None

______________________________________________________________________________
GENERATED TYPE CLASSES

* None

______________________________________________________________________________
GENERATED XINS/JAVA SERVER FUNDAMENT CLASSES

* None

______________________________________________________________________________
GENERATED XINS/JAVA CLIENT CAPI CLASSES

* None

______________________________________________________________________________
MISCELLANEOUS

* The standard result codes should be documented online.
* Use SourceForgeUpload task to smoothen the release process by performing
  the following actions:
  - create a release on the SourceForge site
  - add the corresponding file
  - set the type of the file to '.gz'
  - let SourceForge send a release notification e-mail
* Add date to CHANGES file when a release is created. A (small) custom Ant
  task would need to be developed for this.
* Support the Freshmeat.net XML-RPC interface for notification of new
  releases.
* Generate DocBook and PDF from the Javadoc using the Doclet available at
  http://www.michael-a-fuchs.de/projects/dbdoclet/en/index.html
